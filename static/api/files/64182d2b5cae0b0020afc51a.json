{
  "openapi": "3.0.0",
  "info": {
    "title": "Chat APIs",
    "description": "Manage messages, users, groups for a particular app using our Chat API.",
    "version": "3.0"
  },
  "servers": [
    {
      "url": "https://{appid}.api-{region}.cometchat.io/v3",
      "variables": {
        "appid": { "default": "appId", "description": "(Required) App ID" },
        "region": {
          "enum": ["us", "eu"],
          "default": "us",
          "description": "Select Region"
        }
      }
    }
  ],
  "paths": {
    "/apikeys": {
      "post": {
        "tags": ["API Keys"],
        "summary": "Create",
        "description": "Creates a new API key",
        "operationId": "create-apikey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["name", "scope"],
                "properties": {
                  "name": {
                    "description": "Friendly name for the API key.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Scope for the API key. Possible values: userauth, admin.",
                    "type": "string",
                    "default": "authOnly",
                    "enum": ["authOnly", "fullAccess"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created API key",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/APIKeySchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "apiKey": "f1915e328e249ffaaafd97fb46a57ba55d233fbf",
                    "name": "John's apiKey",
                    "scope": "authOnly",
                    "createdAt": 1625206799
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["API Keys"],
        "summary": "List",
        "description": "Lists API keys",
        "operationId": "list-apikeys",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "Scope of the apikey. Available values: fullAccess, authOnly",
            "schema": { "type": "string", "enum": ["fullAccess", "authOnly"] }
          },
          {
            "name": "searchKey",
            "in": "query",
            "description": "Searches for specified keyword in name",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists API keys",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/APIKeySchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "apiKey": "fcf32d085482db7ef10e971967d70a91cdb6677a",
                      "name": "John's apiKey",
                      "scope": "authOnly",
                      "createdAt": 1631095584
                    },
                    {
                      "apiKey": "0f40b2c254f33d429b1fca5e0eb1cef72c594ddc",
                      "name": "Auth Key",
                      "scope": "authOnly",
                      "createdAt": 1629869272
                    },
                    {
                      "apiKey": "495318bc2e137fb2decf17078abd169a7bd50c8b",
                      "name": "Rest API Key",
                      "scope": "fullAccess",
                      "createdAt": 1629869272
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 3,
                      "count": 3,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/apikeys/{apiKey}": {
      "get": {
        "tags": ["API Keys"],
        "summary": "Get",
        "description": "Retrieves API key",
        "operationId": "get-apikey",
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "description": "An apikey to retrieve.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieves API key",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/APIKeySchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "apiKey": "f1915e328e249ffaaafd97fb46a57ba55d233fbf",
                    "name": "John's apiKey",
                    "scope": "authOnly",
                    "createdAt": 1625206799
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["API Keys"],
        "summary": "Update",
        "description": "Updates an API key",
        "operationId": "update-apikey",
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "description": "An apikey to update.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Friendly name for the API key.",
                    "type": "string"
                  },
                  "scope": {
                    "description": "Scope for the API key. Possible values: userauth, admin.",
                    "type": "string",
                    "enum": ["userauth", "admin"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated API Key",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/APIKeySchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "apiKey": "f1915e328e249ffaaafd97fb46a57ba55d233fbf",
                    "name": "John's apiKey",
                    "scope": "authOnly",
                    "createdAt": 1625206799
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["API Keys"],
        "summary": "Delete",
        "description": "Deletes an API key",
        "operationId": "delete-apikey",
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "description": "An apikey to delete.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "API Key.", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The Api Key fcf32d085482db7ef10e971967d70a91cdb6677a has been deleted successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users": {
      "post": {
        "tags": ["Users"],
        "summary": "Create",
        "description": "Creates a new user",
        "operationId": "creates-user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["uid", "name"],
                "properties": {
                  "uid": {
                    "description": "Unique identifier of the user. Please refer to https://prodocs.cometchat.com/docs/concepts#uid",
                    "type": "string"
                  },
                  "name": {
                    "description": "Display name of the user.",
                    "type": "string"
                  },
                  "avatar": {
                    "description": "URL to profile picture of the user.",
                    "type": "string"
                  },
                  "link": {
                    "description": "URL to profile page.",
                    "type": "string"
                  },
                  "role": {
                    "description": "User role of the user for role based access control.",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Additional information about the user as JSON. If you plan to use [Email Notification](doc:android-extensions-email-notification#section-configure-your-backend-to-store-emails) or [SMS Notification](doc:android-extensions-sms-notification#section-configure-your-backend-to-store-phone-number) extensions, Please add the private metadata here.",
                    "properties": {
                      "@private": {
                        "properties": {
                          "email": { "type": "string" },
                          "contactNumber": { "type": "string" }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "default": {
                      "@private": {
                        "email": "user@email.com",
                        "contactNumber": "0123456789"
                      }
                    }
                  },
                  "tags": {
                    "description": "A list of tags to identify specific users.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  },
                  "withAuthToken": {
                    "description": "Includes authToken of created user in response.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create User",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/userSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "uid": "superhero6",
                    "name": "Barry Allen",
                    "link": "http://placehold.it",
                    "avatar": "http://placehold.it/120x120&text=image1",
                    "metadata": { "rawMetadata": "{'gender':'Male'}" },
                    "status": "offline",
                    "role": "manager",
                    "createdAt": 1638354015,
                    "tags": ["Engineer", "manager"],
                    "authToken": "superhero6_16383540156641d37a023c75d26f4c22a21ff126"
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Users"],
        "summary": "List",
        "description": "Lists all the users of an app",
        "operationId": "list-users",
        "parameters": [
          {
            "name": "searchKey",
            "in": "query",
            "description": "Searches for given keyword in user's list in either name,UID or both.",
            "schema": { "type": "string" }
          },
          {
            "name": "searchIn",
            "in": "query",
            "description": "Searches for specified keyword in name,UID or both.",
            "schema": {
              "type": "array",
              "items": { "type": "string", "enum": ["name", "uid"] }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "User list can be fetched depending on the user status. (available,offline).",
            "schema": { "type": "string", "enum": ["available", "offline"] }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Fetches users count.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of users to be fetched in a request. The default value is 100 and the maximum value is 1000.",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number.",
            "schema": { "type": "integer", "default": "1" }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Retrieves user list based on role.",
            "schema": { "type": "string" }
          },
          {
            "name": "withTags",
            "in": "query",
            "description": "Includes tags in the response.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Fetches only those users that have these tags.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "Fetches users based on multiple roles.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "onlyDeactivated",
            "in": "query",
            "description": "Fetches all the deactivated users of an app.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "withDeactivated",
            "in": "query",
            "description": "Fetches all the users including deactivated users.",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/userSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "uid": "superhero6",
                      "name": "Barry Allen",
                      "link": "http://placehold.it",
                      "avatar": "http://placehold.it/120x120&text=image1",
                      "metadata": {
                        "email": "user@email.com",
                        "contactNumber": "0123456789"
                      },
                      "status": "offline",
                      "role": "manager",
                      "createdAt": 1638354015,
                      "updatedAt": 1638354799,
                      "conversationId": "superhero4_user_superhero6"
                    },
                    {
                      "uid": "superhero2",
                      "name": "Captain America",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "status": "offline",
                      "role": "default",
                      "createdAt": 1629869270,
                      "updatedAt": 1630308676,
                      "conversationId": "superhero2_user_superhero4"
                    },
                    {
                      "uid": "superhero3",
                      "name": "Captain America",
                      "link": "https://data-us.cometchat.io/assets",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "metadata": { "contactNumber": "0123456789" },
                      "status": "offline",
                      "role": "default",
                      "blockedByMe": true,
                      "blockedByMeAt": 1638346853,
                      "blockedAt": 1638346853,
                      "createdAt": 1629869270,
                      "updatedAt": 1638351060,
                      "conversationId": "superhero3_user_superhero4"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 0,
                      "count": 5,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  },
                  "cursor": { "updatedAt": 1638354799, "affix": "prepend" }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Reactivate",
        "description": "Reactivates users for the specified UIDs",
        "operationId": "reactivate-users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "uidsToActivate": {
                    "description": "UIDs that needs to reactivated.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ["tag1"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "re-activated users",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "nonDeactivatedUids": { "type": "array", "items": {} }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": { "nonDeactivatedUids": ["superhero2", "superhero3"] }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Deactivate",
        "description": "Deactivates users for the specified UIDs",
        "operationId": "deactivate-users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "uidsToDeactivate": {
                    "description": "UIDs that needs to deactivated.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deactivated Users",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "deactivatedUids": { "type": "array", "items": {} }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": { "deactivatedUids": ["superhero2", "superhero3"] }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get",
        "description": "Retrieves user details for a specified UID.",
        "operationId": "get-user",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          },
          { "$ref": "#/components/parameters/onBehalfOf" }
        ],
        "responses": {
          "200": {
            "description": "Fetched User",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/userSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "uid": "superhero6",
                    "name": "Barry Allen",
                    "link": "http://placehold.it",
                    "avatar": "http://placehold.it/120x120&text=image1",
                    "status": "offline",
                    "role": "manager",
                    "createdAt": 1638354015
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update",
        "description": "Updates a user with the provided UID",
        "operationId": "update-user",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Display name of the user.",
                    "type": "string"
                  },
                  "avatar": {
                    "description": "URL to profile picture of the user.",
                    "type": "string"
                  },
                  "link": {
                    "description": "URL to profile page.",
                    "type": "string"
                  },
                  "role": {
                    "description": "User role of the user for role based access control.",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Additional information about the user as JSON. If you plan to use [Email Notification](doc:android-extensions-email-notification#section-configure-your-backend-to-store-emails) or [SMS Notification](doc:android-extensions-sms-notification#section-configure-your-backend-to-store-phone-number) extensions, Please add the private metadata here.",
                    "properties": {
                      "@private": {
                        "properties": {
                          "email": { "type": "string" },
                          "contactNumber": { "type": "string" }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object",
                    "default": {
                      "@private": {
                        "email": "user@email.com",
                        "contactNumber": "0123456789"
                      }
                    }
                  },
                  "tags": {
                    "description": "A list of tags to identify specific users.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ["tag1"]
                  },
                  "unset": {
                    "description": "The unsettable user attributes are avatar, link and metadata.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["avatar", "link", "metadata"]
                    },
                    "default": ["avatar"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/userSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "uid": "superhero6",
                    "name": "Barry Allen",
                    "link": "http://placehold.it",
                    "avatar": "http://placehold.it/120x120&text=image1",
                    "metadata": {
                      "email": "user@email.com",
                      "contactNumber": "0123456789"
                    },
                    "status": "offline",
                    "role": "manager",
                    "createdAt": 1638354015,
                    "updatedAt": 1638354799,
                    "tags": ["supergroup"]
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete",
        "description": "Deletes a user for the specified UID",
        "operationId": "delete-user",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "permanent": {
                    "description": "Permanently deletes the user along with all the messages, conversations, etc.",
                    "type": "boolean",
                    "default": "false"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deleted User",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "User with superhero6 has been deleted successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/roles": {
      "post": {
        "tags": ["Roles"],
        "summary": "Create",
        "description": "Creates a new user role",
        "operationId": "create-role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["role", "name"],
                "properties": {
                  "role": {
                    "description": "A unique identifier for the role.",
                    "type": "string",
                    "default": ""
                  },
                  "name": {
                    "description": "Friendly name of the role.",
                    "type": "string",
                    "default": ""
                  },
                  "description": {
                    "description": "Description of the role.",
                    "type": "string",
                    "default": ""
                  },
                  "metadata": {
                    "description": "Addition information about the role as JSON.",
                    "type": "object"
                  },
                  "settings": {
                    "description": "Role settings that is used for restricting list users/send message. Possible values for listUsers & sendMessagesTo are all and friendsOnly",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created a new Role",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/roleSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "role": "manager",
                    "name": "manager",
                    "description": "This role gives an update access",
                    "metadata": { "email": "managers@gmail.com" },
                    "settings": {
                      "listUsers": "all",
                      "sendMessagesTo": "friendsOnly"
                    },
                    "createdAt": 1638343994
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Roles"],
        "summary": "List",
        "description": "Lists the user roles",
        "operationId": "list-roles",
        "responses": {
          "200": {
            "description": "Lists the user roles",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/roleSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "role": "manager",
                      "name": "manager",
                      "description": "This role gives an update access",
                      "metadata": { "email": "managers@gmail.com" },
                      "settings": {
                        "listUsers": "all",
                        "sendMessagesTo": "friendsOnly"
                      },
                      "createdAt": 1638343994
                    },
                    {
                      "role": "default",
                      "name": "Default Role",
                      "description": "This role gives full access ",
                      "createdAt": 1629869270,
                      "updatedAt": 1630306291
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 2,
                      "count": 2,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/roles/{role}": {
      "get": {
        "tags": ["Roles"],
        "summary": "Get",
        "description": "Retrieves role details for a given role.",
        "operationId": "get-role",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "A role to get.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Role", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetched the role",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/roleSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "role": "manager",
                    "name": "manager",
                    "description": "This role gives an update access",
                    "metadata": { "email": "managers@gmail.com" },
                    "settings": {
                      "listUsers": "all",
                      "sendMessagesTo": "friendsOnly"
                    },
                    "createdAt": 1638343994
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Roles"],
        "summary": "Update",
        "description": "Updates a given role.",
        "operationId": "update-role",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "A role to update.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Role", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Friendly name of the role.",
                    "type": "string",
                    "default": ""
                  },
                  "description": {
                    "description": "Description of the role.",
                    "type": "string",
                    "default": ""
                  },
                  "metadata": {
                    "description": "Additional information about the role.",
                    "type": "object",
                    "default": { "email": "dummy@example.com" }
                  },
                  "unset": {
                    "description": "The unsettable role attributes are settings, description and metadata.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["settings", "description", "metadata"]
                    },
                    "default": []
                  },
                  "settings": {
                    "description": "Role settings that is used for restricting list users/send message. Possible values for listUsers & sendMessagesTo are all and friendsOnly",
                    "type": "object",
                    "default": []
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Role",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/roleSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "role": "manager",
                    "name": "manager",
                    "description": "This role gives an update access",
                    "metadata": { "email": "managers@gmail.com" },
                    "settings": {
                      "listUsers": "all",
                      "sendMessagesTo": "friendsOnly"
                    },
                    "createdAt": 1638343994
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Roles"],
        "summary": "Delete",
        "description": "Deletes a role.",
        "operationId": "delete-role",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "A role to delete.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Role", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted Role",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "Role manager has been deleted successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/roles/{role}/restrictedfeatures": {
      "post": {
        "tags": ["Restrict Features"],
        "summary": "Restrict Features",
        "description": "Restrict Features for a given role.",
        "operationId": "restrict-features",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "A role to which features to be restricted.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Role", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["featuresToRestrict"],
                "properties": {
                  "featuresToRestrict": {
                    "description": "Keys of the features to be restricted.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ""
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Restricts Features",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "u.listUsers": {
                          "properties": {
                            "": { "$ref": "#/components/schemas/deleteSchema" }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "u.listUsers": {
                      "success": true,
                      "message": "The feature u.listUsers has been restricted successfully."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Restrict Features"],
        "summary": "List Restricted Features",
        "description": "List all restricted features for a given role.",
        "operationId": "get-restrictedfeatures",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "A role for which features are restricted.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Role", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists Restricted Features",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "title": { "type": "string" },
                          "description": { "type": "string" },
                          "key": { "type": "string" },
                          "path": { "type": "string" },
                          "createdAt": { "type": "integer" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "title": "Delete Group",
                      "description": "Allows logged-in user to delete a group.",
                      "key": "u.deleteGroup",
                      "path": "/v3/groups/{{guid}}",
                      "createdAt": 1639448370
                    },
                    {
                      "title": "List Users",
                      "description": "Allows logged-in user to fetch the user list.",
                      "key": "u.listUsers",
                      "path": "/v3/users",
                      "createdAt": 1639448370
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 2,
                      "count": 2,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Restrict Features"],
        "summary": "Allow Features",
        "description": "Allow features access for a given role.",
        "operationId": "allow-features",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "A role to which allow features.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Role", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "featuresToAllow": {
                    "description": "keys of the features to be allowed.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ""
                  },
                  "allowAll": {
                    "description": "All features to be allowed.",
                    "type": "boolean",
                    "default": ""
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Allows Restricted Features",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The feature has been allowed successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/auth_tokens": {
      "post": {
        "tags": ["Auth Tokens"],
        "summary": "Create",
        "description": "Creates auth token for a user with the specified UID.",
        "operationId": "create-authtoken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "force": {
                    "description": "Generates new auth token forcefully.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created auth token",
            "content": {
              "application/json": {
                "schema": { "type": "object" },
                "example": {
                  "data": {
                    "uid": "superhero1",
                    "authToken": "superhero1_1630306819c3027ce530b2367f3c97b4106f0cb8",
                    "createdAt": 1630306819
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Auth Tokens"],
        "summary": "List",
        "description": "Lists auth tokens for a user with the specified UID.",
        "operationId": "list-authtokens",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of auth tokens",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/authTokenSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "uid": "superhero1",
                      "authToken": "superhero1_1630306819c3027ce530b2367f3c97b4106f0cb8",
                      "createdAt": 1630306819
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 1,
                      "count": 1,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Auth Tokens"],
        "summary": "Flush",
        "description": "Deletes all the auth tokens for the specified UID.",
        "operationId": "flush-authtokens",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of api keys",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "Cleared Auth Tokens successfully for uid superhero1."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/auth_tokens/{authToken}": {
      "get": {
        "tags": ["Auth Tokens"],
        "summary": "Get",
        "description": "Retrieves details of an auth token for the specified UID andauth token.",
        "operationId": "get-authtoken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          },
          { "$ref": "#/components/parameters/authToken" }
        ],
        "responses": {
          "200": {
            "description": "Retrieve Auth Token",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/authTokenSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "uid": "superhero1",
                    "authToken": "superhero1_1630306819c3027ce530b2367f3c97b4106f0cb8",
                    "createdAt": 1630306819
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Auth Tokens"],
        "summary": "Update",
        "description": "Updates the details of an auth token for the specified UID andauth token.",
        "operationId": "update-authtoken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          },
          {
            "name": "authToken",
            "in": "path",
            "description": "An auth token of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Auth Token", "value": "" } }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "platform": {
                    "description": "The platform on which the auth token is being used.",
                    "type": "string"
                  },
                  "userAgent": {
                    "description": "userAgent from which the auth token is used.",
                    "type": "string"
                  },
                  "appInfo": {
                    "description": "JSON data containing app information.",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Auth Token",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/authTokenSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "uid": "superhero1",
                    "authToken": "superhero1_1630306819c3027ce530b2367f3c97b4106f0cb8",
                    "createdAt": 1630306819
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Auth Tokens"],
        "summary": "Delete",
        "description": "Deletes an auth token for the specified UID.",
        "operationId": "delete-authtoken",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          },
          {
            "name": "authToken",
            "in": "path",
            "description": "An auth token of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Auth Token", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted Auth token",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "User with superhero6 has been deleted successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups": {
      "post": {
        "tags": ["Groups"],
        "summary": "Create",
        "description": "Creates a group.",
        "operationId": "create-group",
        "parameters": [{ "$ref": "#/components/parameters/onBehalfOf" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["guid", "name", "type"],
                "properties": {
                  "guid": {
                    "description": "A unique identifier for a group.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the group.",
                    "type": "string"
                  },
                  "type": {
                    "description": "Type of the group. Can be public, password or private.",
                    "type": "string",
                    "enum": ["public", "password", "private"]
                  },
                  "password": {
                    "description": "A password required to join the the group with type password",
                    "type": "string"
                  },
                  "icon": {
                    "description": "An URL for a group icon.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description about the group",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Additional data for the group.",
                    "type": "object"
                  },
                  "owner": {
                    "description": "The UID that you wish to make owner of the group",
                    "type": "string"
                  },
                  "tags": {
                    "description": "List of tags to identify specific groups.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ["tag1"]
                  },
                  "members": {
                    "description": "Add members to a group with scope admins,moderators and participants.",
                    "properties": {
                      "admins": {
                        "description": "UIDs of users to be made admins.",
                        "type": "array",
                        "items": { "type": "string" },
                        "default": []
                      },
                      "moderators": {
                        "description": "UIDs of users to be made moderators.",
                        "type": "array",
                        "items": { "type": "string" },
                        "default": []
                      },
                      "participants": {
                        "description": "UIDs of users to be made participants.",
                        "type": "array",
                        "items": { "type": "string" },
                        "default": []
                      },
                      "usersToBan": {
                        "description": "UIDs of the users to be banned from the group.",
                        "type": "array",
                        "items": { "type": "string" },
                        "default": []
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/groupSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "guid": "project-group",
                    "name": "Project Group",
                    "description": "project related discussions between members",
                    "icon": "http://placehold.it/120x120&text=image1",
                    "type": "public",
                    "scope": "admin",
                    "membersCount": 1,
                    "joinedAt": 1638440784,
                    "conversationId": "group_project-group",
                    "hasJoined": true,
                    "createdAt": 1638440784,
                    "owner": "superhero4",
                    "tags": ["friends", "project"]
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Groups"],
        "summary": "List",
        "description": "Lists the groups.",
        "operationId": "list-groups",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          {
            "name": "searchKey",
            "in": "query",
            "description": "Searches for given keyword in group's list (either GUID, name or email).",
            "schema": { "type": "string" }
          },
          {
            "name": "searchIn",
            "in": "query",
            "description": "Searches for specified keyword in name,GUID or both.",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorts the group list by either Name,Guid or Created at . Available values: name, guid, createdAt",
            "schema": {
              "type": "string",
              "enum": ["name", "guid", "createdAt"]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sorts the group list in ascending or descending order. Available values: asc, desc",
            "schema": { "type": "string", "enum": ["asc", "desc"] }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of groups to be fetched in a request. The default value is 100 and the maximum value is 1000.",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "affix",
            "in": "query",
            "description": "Determines whether to fetch the groups either before or after createdAt/updatedAt timestamp. Possible values are append(after) and prepend(before).",
            "schema": { "type": "string", "enum": ["append", "prepend"] }
          },
          {
            "name": "updatedAt",
            "in": "query",
            "description": "Fetches the groups list after a particular updatedAt timestamp.",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "withTags",
            "in": "query",
            "description": "Includes those groups that have tags.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Fetches only those groups that have these tags.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Fetches groups based on group type(public, protected, password).",
            "schema": {
              "type": "string",
              "enum": ["public", "private", "protected"]
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Fetches groups based on multiple types.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": { "type": "integer" }
          },
          {
            "name": "hasJoined",
            "in": "query",
            "description": "Fetches all the joined groups of a user. This will work only with onBehalfOf parameter in header. It accepts only true as a value, setting it as false simply removes this filter.",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of groups",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/groupSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    },
                    "cursor": {
                      "properties": {
                        "updatedAt": { "type": "integer" },
                        "affix": { "type": "string" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "0": {
                      "0": {
                        "guid": "project-group-2",
                        "name": "Project Group 2",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "public",
                        "scope": "admin",
                        "membersCount": 1,
                        "joinedAt": 1638440784,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1638440784,
                        "owner": "superhero4",
                        "tags": ["friends", "project"]
                      },
                      "guid": "project-group",
                      "name": "Project Group",
                      "description": "project related discussions between members",
                      "icon": "http://placehold.it/120x120&text=image1",
                      "type": "public",
                      "scope": "admin",
                      "membersCount": 1,
                      "joinedAt": 1638440784,
                      "conversationId": "group_project-group",
                      "hasJoined": true,
                      "createdAt": 1638440784,
                      "owner": "superhero4",
                      "tags": ["friends", "project"]
                    },
                    "meta": {
                      "pagination": {
                        "total": 0,
                        "count": 5,
                        "per_page": 100,
                        "current_page": 1,
                        "total_pages": 1
                      },
                      "cursor": { "updatedAt": 1638354799, "affix": "prepend" }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}": {
      "get": {
        "tags": ["Groups"],
        "summary": "Get",
        "description": "Retrieves details of a group for a given GUID.",
        "operationId": "get-group",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" }
        ],
        "responses": {
          "200": {
            "description": "Get group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/groupSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "guid": "project-group",
                    "name": "Project Group",
                    "description": "project related discussions between members",
                    "icon": "http://placehold.it/120x120&text=image1",
                    "type": "public",
                    "scope": "admin",
                    "membersCount": 1,
                    "joinedAt": 1638440784,
                    "conversationId": "group_project-group",
                    "hasJoined": true,
                    "createdAt": 1638440784,
                    "owner": "superhero4",
                    "tags": ["friends", "project"]
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Groups"],
        "summary": "Update",
        "description": "Updates the group details for a given GUID.",
        "operationId": "update-group",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Name of the group.",
                    "type": "string"
                  },
                  "type": {
                    "description": "The type of the group. The available values are: public, password and private.",
                    "type": "string",
                    "enum": ["public", "password", "private"]
                  },
                  "password": {
                    "description": "A password required to join the the group with type password",
                    "type": "string"
                  },
                  "icon": {
                    "description": "An URL for a group icon.",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description about the group",
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Additional group data.",
                    "type": "object"
                  },
                  "owner": {
                    "description": "The UID that you wish to make the owner of the group.This field will be ignored if onBehalfOf parameter in the header is present in the request.",
                    "type": "string"
                  },
                  "tags": {
                    "description": "Updates tags of a group.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ["tag1"]
                  },
                  "unset": {
                    "description": "The unsettable user attributes are icon, description and metadata.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": ["icon", "description", "metadata"]
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/groupSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "guid": "project-group",
                    "name": "Project Group",
                    "description": "project related discussions between members",
                    "icon": "http://placehold.it/120x120&text=image1",
                    "type": "public",
                    "scope": "admin",
                    "membersCount": 1,
                    "joinedAt": 1638440784,
                    "conversationId": "group_project-group",
                    "hasJoined": true,
                    "createdAt": 1638440784,
                    "owner": "superhero4",
                    "tags": ["friends", "project"]
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Groups"],
        "summary": "Delete",
        "description": "Deletes a group with a given GUID.",
        "operationId": "delete-group",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" }
        ],
        "responses": {
          "200": {
            "description": "Deleted Group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "Group with guid project-group has been deleted successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/bannedusers/{uid}": {
      "post": {
        "tags": ["Banned Users"],
        "summary": "Ban",
        "description": "Bans a member from a group for a given GUID and UID.",
        "operationId": "ban-group-user",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" },
          { "$ref": "#/components/parameters/uid" }
        ],
        "responses": {
          "200": {
            "description": "Create Group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The user with uid superhero3 has been banned from the Group with supergroup."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Banned Users"],
        "summary": "Unban",
        "description": "Unban a member with given UID from a group for a given GUID.",
        "operationId": "unban-group-user",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" },
          { "$ref": "#/components/parameters/uid" }
        ],
        "responses": {
          "200": {
            "description": "Create Group",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The user with uid superhero3 has been banned from the Group with supergroup."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/bannedusers": {
      "get": {
        "tags": ["Banned Users"],
        "summary": "List",
        "description": "Lists banned users from a group for a given GUID.",
        "operationId": "list-banned-group-users",
        "parameters": [{ "$ref": "#/components/parameters/guid" }],
        "responses": {
          "200": {
            "description": "get Banned User",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/bannedUserSchema" }
                      },
                      "type": "object"
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    },
                    "cursor": {
                      "properties": {
                        "updatedAt": { "type": "integer" },
                        "affix": { "type": "string" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "uid": "superhero6",
                      "name": "Barry Allen",
                      "link": "http://placehold.it",
                      "avatar": "http://placehold.it/120x120&text=image1",
                      "metadata": {
                        "email": "user@email.com",
                        "contactNumber": "0123456789"
                      },
                      "status": "offline",
                      "role": "manager",
                      "createdAt": 1638354015,
                      "updatedAt": 1638354799,
                      "conversationId": "superhero4_user_superhero6"
                    },
                    {
                      "uid": "superhero2",
                      "name": "Captain America",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "status": "offline",
                      "role": "default",
                      "createdAt": 1629869270,
                      "updatedAt": 1630308676,
                      "conversationId": "superhero2_user_superhero4"
                    },
                    {
                      "uid": "superhero3",
                      "name": "Captain America",
                      "link": "https://data-us.cometchat.io/assets",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "metadata": { "contactNumber": "0123456789" },
                      "status": "offline",
                      "role": "default",
                      "blockedByMe": true,
                      "blockedByMeAt": 1638346853,
                      "blockedAt": 1638346853,
                      "createdAt": 1629869270,
                      "updatedAt": 1638351060,
                      "conversationId": "superhero3_user_superhero4"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 0,
                      "count": 5,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/members": {
      "post": {
        "tags": ["Group Members"],
        "summary": "Add members",
        "description": "Adds multiple users as per the scope.",
        "operationId": "add-group-members",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "admins": {
                    "description": "UIDs of users to be made admins.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  },
                  "moderators": {
                    "description": "UIDs of users to be made moderators.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  },
                  "participants": {
                    "description": "UIDs of users to be made participants.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  },
                  "usersToBan": {
                    "description": "UIDs of the users to be banned from the group.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": []
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Group Members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/groupMemberSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "usersToBan": { "superhero6": { "success": true } },
                    "admins": {
                      "superhero1": {
                        "success": true,
                        "data": {
                          "id": "32",
                          "conversationId": "group_project-group",
                          "sender": "app_system",
                          "receiverType": "group",
                          "receiver": "project-group",
                          "category": "action",
                          "type": "groupMember",
                          "data": {
                            "action": "added",
                            "entities": {
                              "by": {
                                "entity": {
                                  "uid": "app_system",
                                  "name": "System",
                                  "role": "default",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "on": {
                                "entity": {
                                  "uid": "superhero1",
                                  "name": "Iron Man",
                                  "role": "default",
                                  "avatar": "https://data-us.cometchat.io/assets/images/avatars/ironman.png",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "for": {
                                "entity": {
                                  "guid": "project-group",
                                  "icon": "http://placehold.it/120x120&text=image1",
                                  "name": "Project Group",
                                  "tags": ["friends", "project"],
                                  "type": "public",
                                  "owner": "superhero2",
                                  "createdAt": 1625460947,
                                  "description": "project related discussions between members",
                                  "membersCount": 2,
                                  "conversationId": "group_project-group"
                                },
                                "entityType": "group"
                              }
                            }
                          },
                          "sentAt": 1625460972,
                          "updatedAt": 1625460972
                        }
                      }
                    },
                    "moderators": {
                      "superhero3": {
                        "success": true,
                        "data": {
                          "id": "33",
                          "conversationId": "group_project-group",
                          "sender": "app_system",
                          "receiverType": "group",
                          "receiver": "project-group",
                          "category": "action",
                          "type": "groupMember",
                          "data": {
                            "action": "added",
                            "entities": {
                              "by": {
                                "entity": {
                                  "uid": "app_system",
                                  "name": "System",
                                  "role": "default",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "on": {
                                "entity": {
                                  "uid": "superhero3",
                                  "name": "Spiderman",
                                  "role": "default",
                                  "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                                  "status": "offline",
                                  "createdAt": 1596537299,
                                  "updatedAt": 1625234590
                                },
                                "entityType": "user"
                              },
                              "for": {
                                "entity": {
                                  "guid": "project-group",
                                  "icon": "http://placehold.it/120x120&text=image1",
                                  "name": "Project Group",
                                  "tags": ["friends", "project"],
                                  "type": "public",
                                  "owner": "superhero2",
                                  "createdAt": 1625460947,
                                  "updatedAt": 1625460972,
                                  "description": "project related discussions between members",
                                  "membersCount": 3,
                                  "conversationId": "group_project-group"
                                },
                                "entityType": "group"
                              }
                            }
                          },
                          "sentAt": 1625460973,
                          "updatedAt": 1625460973
                        }
                      }
                    },
                    "participants": {
                      "superhero4": {
                        "success": true,
                        "data": {
                          "id": "34",
                          "conversationId": "group_project-group",
                          "sender": "app_system",
                          "receiverType": "group",
                          "receiver": "project-group",
                          "category": "action",
                          "type": "groupMember",
                          "data": {
                            "action": "added",
                            "entities": {
                              "by": {
                                "entity": {
                                  "uid": "app_system",
                                  "name": "System",
                                  "role": "default",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "on": {
                                "entity": {
                                  "uid": "superhero4",
                                  "name": "Wolverine",
                                  "role": "default",
                                  "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "for": {
                                "entity": {
                                  "guid": "project-group",
                                  "icon": "http://placehold.it/120x120&text=image1",
                                  "name": "Project Group",
                                  "tags": ["friends", "project"],
                                  "type": "public",
                                  "owner": "superhero2",
                                  "createdAt": 1625460947,
                                  "updatedAt": 1625460973,
                                  "description": "project related discussions between members",
                                  "membersCount": 4,
                                  "conversationId": "group_project-group"
                                },
                                "entityType": "group"
                              }
                            }
                          },
                          "sentAt": 1625460973,
                          "updatedAt": 1625460973
                        }
                      },
                      "superhero5": {
                        "success": true,
                        "data": {
                          "id": "35",
                          "conversationId": "group_project-group",
                          "sender": "app_system",
                          "receiverType": "group",
                          "receiver": "project-group",
                          "category": "action",
                          "type": "groupMember",
                          "data": {
                            "action": "added",
                            "entities": {
                              "by": {
                                "entity": {
                                  "uid": "app_system",
                                  "name": "System",
                                  "role": "default",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "on": {
                                "entity": {
                                  "uid": "superhero5",
                                  "name": "Cyclops",
                                  "role": "default",
                                  "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                                  "status": "offline",
                                  "createdAt": 1596537299
                                },
                                "entityType": "user"
                              },
                              "for": {
                                "entity": {
                                  "guid": "project-group",
                                  "icon": "http://placehold.it/120x120&text=image1",
                                  "name": "Project Group",
                                  "tags": ["friends", "project"],
                                  "type": "public",
                                  "owner": "superhero2",
                                  "createdAt": 1625460947,
                                  "updatedAt": 1625460973,
                                  "description": "project related discussions between members",
                                  "membersCount": 5,
                                  "conversationId": "group_project-group"
                                },
                                "entityType": "group"
                              }
                            }
                          },
                          "sentAt": 1625460973,
                          "updatedAt": 1625460973
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Group Members"],
        "summary": "List",
        "description": "List the members of a group for a given GUID",
        "operationId": "list-group-members",
        "parameters": [
          { "$ref": "#/components/parameters/guid" },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of users to be fetched in a request. The default value is 100 and the maximum value is 1000.",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page Number.",
            "schema": { "type": "integer", "default": "1" }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "Fetches group members based on multiple scope.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": {} }
          }
        ],
        "responses": {
          "200": {
            "description": "Create Group Members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/groupMemberListSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "uid": "superhero2",
                      "name": "Captain America",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "status": "offline",
                      "role": "default",
                      "scope": "participant",
                      "joinedAt": 1638360106,
                      "createdAt": 1629869270,
                      "updatedAt": 1630308676,
                      "conversationId": "superhero2_user_superhero4"
                    },
                    {
                      "uid": "superhero3",
                      "name": "Captain America",
                      "link": "https://data-us.cometchat.io/assets",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "metadata": { "contactNumber": "0123456789" },
                      "status": "offline",
                      "role": "default",
                      "scope": "participant",
                      "joinedAt": 1638360106,
                      "createdAt": 1629869270,
                      "updatedAt": 1638351060,
                      "conversationId": "superhero3_user_superhero4"
                    },
                    {
                      "uid": "superhero5",
                      "name": "Cyclops",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                      "status": "offline",
                      "role": "default",
                      "scope": "moderator",
                      "joinedAt": 1638360106,
                      "createdAt": 1629869270,
                      "conversationId": "superhero4_user_superhero5"
                    },
                    {
                      "uid": "superhero4",
                      "name": "Wolverine",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                      "status": "offline",
                      "role": "default",
                      "scope": "admin",
                      "joinedAt": 1638359534,
                      "createdAt": 1629869270
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 0,
                      "count": 5,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  },
                  "cursor": { "updatedAt": 1638354799, "affix": "prepend" }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/members/{uid}": {
      "put": {
        "tags": ["Group Members"],
        "summary": "Change Scope",
        "description": "Change scope of a member to the group for a given GUID and UID",
        "operationId": "change-group-member-scope",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" },
          { "$ref": "#/components/parameters/uid" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "scope": {
                    "description": "A scope for the user.",
                    "type": "string",
                    "default": "participant"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed Scope of Group Members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "guid": { "type": "string" },
                        "uid": { "type": "string" },
                        "scope": { "type": "string" },
                        "joinedAt": { "type": "integer" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "guid": "supergroup",
                    "uid": "superhero2",
                    "scope": "participant",
                    "joinedAt": 1631690303
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Group Members"],
        "summary": "Kick",
        "description": "Removes a member with given UID from a group for a given GUID.",
        "operationId": "kick-group-member",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" },
          { "$ref": "#/components/parameters/uid" }
        ],
        "responses": {
          "200": {
            "description": "Kicked Group Members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The member with superhero3 has been kicked from the Group with supergroup."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/friends": {
      "post": {
        "tags": ["Friends"],
        "summary": "Add Friends",
        "description": "The API allows to add multiple friends for a given UID.",
        "operationId": "add-friend",
        "parameters": [{ "$ref": "#/components/parameters/uid" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "accepted": {
                    "description": "The array of UIDs of the friends.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Added Friend",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "<uid>": {
                          "properties": {
                            "": { "$ref": "#/components/schemas/deleteSchema" }
                          },
                          "type": "object"
                        },
                        "<uid2>": {
                          "properties": {
                            "": { "$ref": "#/components/schemas/deleteSchema" }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "accepted": {
                      "superhero2": {
                        "success": true,
                        "message": "Created relationship with status accepted."
                      },
                      "superhero3": {
                        "success": true,
                        "message": "Created relationship with status accepted."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Friends"],
        "summary": "List Friends",
        "description": "The API allows to fetch friends for a given UID.",
        "operationId": "list-all-friends",
        "parameters": [
          { "$ref": "#/components/parameters/uid" },
          {
            "name": "searchKey",
            "in": "query",
            "description": "Searches for given keyword in friends list (either UID or name).",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of friends.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/userSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "uid": "superhero6",
                      "name": "Barry Allen",
                      "link": "http://placehold.it",
                      "avatar": "http://placehold.it/120x120&text=image1",
                      "metadata": {
                        "email": "user@email.com",
                        "contactNumber": "0123456789"
                      },
                      "status": "offline",
                      "role": "manager",
                      "createdAt": 1638354015,
                      "updatedAt": 1638354799,
                      "conversationId": "superhero4_user_superhero6"
                    },
                    {
                      "uid": "superhero2",
                      "name": "Captain America",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "status": "offline",
                      "role": "default",
                      "createdAt": 1629869270,
                      "updatedAt": 1630308676,
                      "conversationId": "superhero2_user_superhero4"
                    },
                    {
                      "uid": "superhero3",
                      "name": "Captain America",
                      "link": "https://data-us.cometchat.io/assets",
                      "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                      "metadata": { "contactNumber": "0123456789" },
                      "status": "offline",
                      "role": "default",
                      "blockedByMe": true,
                      "blockedByMeAt": 1638346853,
                      "blockedAt": 1638346853,
                      "createdAt": 1629869270,
                      "updatedAt": 1638351060,
                      "conversationId": "superhero3_user_superhero4"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 0,
                      "count": 5,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    },
                    "cursor": { "updatedAt": 1638354799, "affix": "prepend" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Friends"],
        "summary": "Remove Friends",
        "description": "The API removes friends for a given UID.",
        "operationId": "remove-friend",
        "parameters": [{ "$ref": "#/components/parameters/uid" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "friends": {
                    "description": "The array of friends to remove.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of api keys",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "Deleted the friend relations succussfully"
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/blockedusers": {
      "post": {
        "tags": ["Blocked Users"],
        "summary": "Block User",
        "description": "Blocks the specified user",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["blockedUids"],
                "properties": {
                  "blockedUids": {
                    "description": "UIDs of the users to be blocked",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blocked user",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "<uid>": {
                          "properties": {
                            "": { "$ref": "#/components/schemas/deleteSchema" }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "superhero4": {
                      "success": true,
                      "message": "The user with UID superhero1 has blocked user with UID superhero3 successfully."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Blocked Users"],
        "summary": "Unblock User",
        "description": "Unblocks the specified user",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["blockedUids"],
                "properties": {
                  "blockedUids": {
                    "description": "UIDs of the users to be unblock",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blocked user",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "<uid>": {
                          "properties": {
                            "": { "$ref": "#/components/schemas/deleteSchema" }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "superhero4": {
                      "success": true,
                      "message": "The user with UID superhero1 has blocked user with UID superhero3 successfully."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Blocked Users"],
        "summary": "List Blocked Users",
        "description": "Retrieves the blocked users",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of a user.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "UID", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Blocked user",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          { "$ref": "#/components/schemas/userSchema" },
                          { "$ref": "#/components/schemas/blockedUserSchema" }
                        ]
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "uid": "superhero6",
                      "name": "Barry Allen",
                      "link": "http://placehold.it",
                      "avatar": "http://placehold.it/120x120&text=image1",
                      "metadata": { "rawMetadata": "{'gender':'Male'}" },
                      "status": "offline",
                      "role": "manager",
                      "blockedByMe": true,
                      "blockedByMeAt": 1638346853,
                      "blockedAt": 1638346853,
                      "createdAt": 1629869270,
                      "updatedAt": 1638351060,
                      "conversationId": "superhero3_user_superhero4"
                    },
                    {
                      "uid": "superhero2",
                      "name": "Captain America",
                      "link": "http://placehold.it",
                      "avatar": "http://placehold.it/120x120&text=image1",
                      "metadata": { "rawMetadata": "{'gender':'Male'}" },
                      "status": "offline",
                      "role": "manager",
                      "blockedByMe": true,
                      "blockedByMeAt": 1638346853,
                      "blockedAt": 1638346853,
                      "createdAt": 1629869270,
                      "updatedAt": 1638351060,
                      "conversationId": "superhero1_user_superhero2"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 0,
                      "count": 5,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    },
                    "cursor": { "updatedAt": 1638354799, "affix": "prepend" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/messages": {
      "post": {
        "tags": ["Messages"],
        "summary": "Send Message",
        "description": "Sends Message on behalf of a user.",
        "operationId": "send-message",
        "parameters": [{ "$ref": "#/components/parameters/onBehalfOf" }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "receiver": {
                    "description": "The receiver of the message.",
                    "type": "string"
                  },
                  "receiverType": {
                    "description": "The receiverType of the message. either user or group",
                    "type": "string",
                    "enum": ["user", "group"]
                  },
                  "category": {
                    "description": "Category of the message. The available categories are message and custom.",
                    "type": "string",
                    "default": "message",
                    "enum": ["message", "custom"]
                  },
                  "type": {
                    "description": "Type of the message. The available values are text, image, file, audio, video.",
                    "type": "string",
                    "default": "text",
                    "enum": ["text", "image", "file", "audio", "video"]
                  },
                  "data": {
                    "description": "JSON containing message attributes.",
                    "properties": {
                      "text": { "type": "string" },
                      "metadata": { "type": "object" },
                      "customData": {
                        "description": "when category==”custom”, this property can have any JSON object.",
                        "type": "object"
                      },
                      "attachments": {
                        "description": "For the messages with image, video, audio or file type (i.e. category==\"message\" && type !=\"text\"), the property contains an array of attachment objects.",
                        "type": "array",
                        "items": {
                          "properties": {
                            "url": {
                              "description": "Contains the URL of the attachment.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the attachment.",
                              "type": "string"
                            },
                            "mimeType": {
                              "description": "Mime Type of attachment.",
                              "type": "string"
                            },
                            "extension": {
                              "description": "The extension of the attachment.",
                              "type": "string"
                            },
                            "size": {
                              "description": "The size of the attachment(in bytes).",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "object",
                    "default": {
                      "text": "Hi Tom!",
                      "metadata": { "key1": "value1", "key2": "value2" }
                    }
                  },
                  "multipleReceivers": {
                    "description": "JSON containing array of UIDs and GUID for whom the message must be sent. Format for multiple receivers - {\"uids\": [\"uid1\",\"uid2\"], \"guids\":[\"guid1\"]}",
                    "properties": {
                      "uids": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "guids": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "A list of tags to identify specific messages.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "conversationId": "superhero3_user_superhero5",
                    "sender": "superhero3",
                    "receiverType": "user",
                    "receiver": "superhero5",
                    "category": "message",
                    "type": "text",
                    "data": {
                      "text": "test     hello",
                      "metadata": { "key1": "val1" },
                      "entities": {
                        "sender": {
                          "entity": {
                            "uid": "superhero3",
                            "name": "Spiderman",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550
                          },
                          "entityType": "user"
                        },
                        "receiver": {
                          "entity": {
                            "uid": "superhero5",
                            "name": "Cyclops",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550,
                            "conversationId": "superhero3_user_superhero5"
                          },
                          "entityType": "user"
                        }
                      }
                    },
                    "sentAt": 1638423490,
                    "updatedAt": 1638423490
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Messages"],
        "summary": "List Messages",
        "description": "Fetches the messages list.",
        "operationId": "list-all-messages",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          {
            "name": "searchKey",
            "in": "query",
            "description": "Retrieves messages containing the searchKey.",
            "schema": { "type": "string" }
          },
          {
            "name": "receiverType",
            "in": "query",
            "description": "Displays messages based on receiverType (user/group)",
            "schema": { "type": "string", "enum": ["user", "group"] }
          },
          {
            "name": "affix",
            "in": "query",
            "description": "Determines whether to pull the messages either before or after any message id. Possible values are append(after) and prepend(before).",
            "schema": { "type": "string" }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Retrieves all those messages after the passed id.",
            "schema": { "type": "string" }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filters messages by category. Possible values: message, action and custom.",
            "schema": {
              "type": "string",
              "enum": ["message", "action", "custom"]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters messages by type.",
            "schema": { "type": "string" }
          },
          {
            "name": "hideDeleted",
            "in": "query",
            "description": "Hides deleted messages from List.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "onlyDeleted",
            "in": "query",
            "description": "Includes only deleted messages in List.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "hideReplies",
            "in": "query",
            "description": "Shows only messages skipping the replies in the message thread.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Includes unread message count in List.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "sentAt",
            "in": "query",
            "description": "Fetches the messages list after a particular sentAt timestamp.",
            "schema": { "type": "integer" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to fetch. Minimum value: 1, Maximum value: 1000",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "conversationId",
            "in": "query",
            "description": "Fetches all the messages belong to a particular conversation.",
            "schema": { "type": "string" }
          },
          {
            "name": "withTags",
            "in": "query",
            "description": "This will fetch messages along with the tags.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "This will fetch only those messages belonging to the mentioned tags.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Fetches messages based on multiple categories.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Fetches messages based on multiple types.",
            "schema": { "type": "array", "items": {} }
          },
          {
            "name": "fromTimestamp",
            "in": "query",
            "description": "Fetches the messages from this timestamp.",
            "schema": { "type": "integer" }
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "description": "Fetches the messages till this timestamp. It will be ignored if fromTimestamp is missing or empty.",
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "List Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/messageSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageMetaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "id": "1",
                      "conversationId": "superhero3_user_superhero5",
                      "sender": "superhero3",
                      "receiverType": "user",
                      "receiver": "superhero5",
                      "category": "message",
                      "type": "text",
                      "data": {
                        "text": "test     hello",
                        "entities": {
                          "sender": {
                            "entity": {
                              "uid": "superhero3",
                              "name": "Spiderman",
                              "role": "default",
                              "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                              "status": "offline",
                              "createdAt": 1638361550
                            },
                            "entityType": "user"
                          },
                          "receiver": {
                            "entity": {
                              "uid": "superhero5",
                              "name": "Cyclops",
                              "role": "default",
                              "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                              "status": "offline",
                              "createdAt": 1638361550,
                              "conversationId": "superhero3_user_superhero5"
                            },
                            "entityType": "user"
                          }
                        },
                        "metadata": { "key1": "val1" }
                      },
                      "sentAt": 1638423490,
                      "updatedAt": 1638423490
                    }
                  ],
                  "meta": {
                    "current": { "limit": 100, "count": 1 },
                    "next": {
                      "affix": "append",
                      "sentAt": 1638423490,
                      "id": "1"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/messages/{id}": {
      "get": {
        "tags": ["Messages"],
        "summary": "Get Message",
        "description": "Fetches the details of a message.",
        "operationId": "get-message-details",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the message whose details are to be fetched.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Message ID", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Retreived Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "conversationId": "superhero3_user_superhero5",
                    "sender": "superhero3",
                    "receiverType": "user",
                    "receiver": "superhero5",
                    "category": "message",
                    "type": "text",
                    "data": {
                      "text": "test     hello",
                      "metadata": { "key1": "val1" },
                      "entities": {
                        "sender": {
                          "entity": {
                            "uid": "superhero3",
                            "name": "Spiderman",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550
                          },
                          "entityType": "user"
                        },
                        "receiver": {
                          "entity": {
                            "uid": "superhero5",
                            "name": "Cyclops",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550,
                            "conversationId": "superhero3_user_superhero5"
                          },
                          "entityType": "user"
                        }
                      }
                    },
                    "sentAt": 1638423490,
                    "updatedAt": 1638423490
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Messages"],
        "summary": "Update Message",
        "description": "Edits the message on behalf of a user.",
        "operationId": "update-message",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the message whose details are to be fetched.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Message ID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "description": "The data that needs to be modified.",
                    "properties": {
                      "text": { "type": "string" },
                      "metadata": { "type": "object" }
                    },
                    "type": "object"
                  },
                  "tags": {
                    "description": "A list of tags to identify specific messages.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ["tag1"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/updatemessageSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "id": "402",
                    "conversationId": "superhero1_user_superhero2",
                    "sender": "superhero1",
                    "receiverType": "user",
                    "receiver": "superhero2",
                    "category": "action",
                    "type": "message",
                    "data": {
                      "action": "edited",
                      "entities": {
                        "by": {
                          "entity": {
                            "uid": "superhero1",
                            "name": "Updated Name",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1639448370,
                            "updatedAt": 1640599553
                          },
                          "entityType": "user"
                        },
                        "for": {
                          "entity": {
                            "uid": "superhero2",
                            "name": "Captain America",
                            "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1639448370
                          },
                          "entityType": "user"
                        },
                        "on": {
                          "entity": {
                            "id": "69",
                            "conversationId": "superhero1_user_superhero2",
                            "sender": "superhero1",
                            "receiverType": "user",
                            "receiver": "superhero2",
                            "category": "message",
                            "type": "text",
                            "data": {
                              "text": "hello spider",
                              "entities": {
                                "sender": {
                                  "entity": {
                                    "uid": "superhero1",
                                    "name": "Iron Man",
                                    "role": "default",
                                    "avatar": "https://data-eu.cometchat.io/assets/images/avatars/ironman.png",
                                    "status": "offline",
                                    "createdAt": 1639448370
                                  },
                                  "entityType": "user"
                                },
                                "receiver": {
                                  "entity": {
                                    "uid": "superhero2",
                                    "name": "Captain America",
                                    "role": "default",
                                    "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                                    "status": "offline",
                                    "createdAt": 1639448370,
                                    "conversationId": "superhero1_user_superhero2"
                                  },
                                  "entityType": "user"
                                }
                              }
                            },
                            "sentAt": 1640171302,
                            "editedAt": 1641477338,
                            "editedBy": "app_system",
                            "updatedAt": 1641477338,
                            "tags": ["t6"]
                          },
                          "entityType": "message"
                        }
                      }
                    },
                    "sentAt": 1641477338,
                    "updatedAt": 1641477338
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Messages"],
        "summary": "Delete Message",
        "description": "Deletes the message.",
        "operationId": "deletes-message",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the message whose details are to be deleted.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Message ID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "permanent": {
                    "description": "Deletes the message permanently.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deleted Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/updatemessageSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "id": "402",
                    "conversationId": "superhero1_user_superhero2",
                    "sender": "superhero1",
                    "receiverType": "user",
                    "receiver": "superhero2",
                    "category": "action",
                    "type": "message",
                    "data": {
                      "action": "edited",
                      "entities": {
                        "by": {
                          "entity": {
                            "uid": "superhero1",
                            "name": "Updated Name",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1639448370
                          },
                          "entityType": "user"
                        },
                        "for": {
                          "entity": {
                            "uid": "superhero2",
                            "name": "Captain America",
                            "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1639448370
                          },
                          "entityType": "user"
                        },
                        "on": {
                          "entity": {
                            "id": "69",
                            "conversationId": "superhero1_user_superhero2",
                            "sender": "superhero1",
                            "receiverType": "user",
                            "receiver": "superhero2",
                            "category": "message",
                            "type": "text",
                            "data": {
                              "text": "hello spider",
                              "entities": {
                                "sender": {
                                  "entity": {
                                    "uid": "superhero1",
                                    "name": "Iron Man",
                                    "role": "default",
                                    "avatar": "https://data-eu.cometchat.io/assets/images/avatars/ironman.png",
                                    "status": "offline",
                                    "createdAt": 1639448370
                                  },
                                  "entityType": "user"
                                },
                                "receiver": {
                                  "entity": {
                                    "uid": "superhero2",
                                    "name": "Captain America",
                                    "role": "default",
                                    "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                                    "status": "offline",
                                    "createdAt": 1639448370,
                                    "conversationId": "superhero1_user_superhero2"
                                  },
                                  "entityType": "user"
                                }
                              }
                            },
                            "sentAt": 1640171302,
                            "editedAt": 1641477338,
                            "editedBy": "app_system",
                            "updatedAt": 1641477338,
                            "tags": ["t6"]
                          },
                          "entityType": "message"
                        }
                      }
                    },
                    "sentAt": 1641477338,
                    "updatedAt": 1641477338
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/messages/{id}/thread": {
      "post": {
        "tags": ["Messages"],
        "summary": "Send Threaded Message",
        "description": "Sends Threaded Message on behalf of a user.",
        "operationId": "send-thread-message",
        "parameters": [
          { "$ref": "#/components/parameters/requiredonBehalfOf" },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the message for which thread message to be sent",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Message ID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "receiver": {
                    "description": "The receiver of the message.",
                    "type": "string"
                  },
                  "receiverType": {
                    "description": "The receiverType of the message. either user or group",
                    "type": "string",
                    "enum": ["user", "group"]
                  },
                  "category": {
                    "description": "Category of the message. The available categories are message and custom.",
                    "type": "string",
                    "default": "message",
                    "enum": ["message", "custom"]
                  },
                  "type": {
                    "description": "Type of the message. The available values are text, image, file, audio, video.",
                    "type": "string",
                    "default": "text",
                    "enum": ["text", "image", "file", "audio", "video"]
                  },
                  "data": {
                    "description": "JSON containing message attributes.",
                    "type": "object",
                    "default": {
                      "text": "Hi Tom!",
                      "metadata": { "key1": "value1", "key2": "value2" }
                    }
                  },
                  "multipleReceivers": {
                    "description": "JSON containing array of UIDs and GUID for whom the message must be sent. Format for multiple receivers - {\"uids\": [\"uid1\",\"uid2\"], \"guids\":[\"guid1\"]}",
                    "type": "object",
                    "default": { "uids": ["uid1", "uid2"], "guids": ["guid1"] }
                  },
                  "tags": {
                    "description": "A list of tags to identify specific messages.",
                    "type": "array",
                    "items": { "type": "string" },
                    "default": ["tag1"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object",
                      "allOf": [
                        {
                          "properties": { "parentId": { "readOnly": false } },
                          "type": "object"
                        },
                        { "$ref": "#/components/schemas/messageSchema" }
                      ]
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "id": "2",
                    "conversationId": "superhero3_user_superhero5",
                    "sender": "superhero3",
                    "receiverType": "user",
                    "receiver": "superhero5",
                    "category": "message",
                    "type": "text",
                    "data": {
                      "text": "test     hello",
                      "metadata": { "key1": "val1" },
                      "entities": {
                        "sender": {
                          "entity": {
                            "uid": "superhero3",
                            "name": "Spiderman",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550
                          },
                          "entityType": "user"
                        },
                        "receiver": {
                          "entity": {
                            "uid": "superhero5",
                            "name": "Cyclops",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550,
                            "conversationId": "superhero3_user_superhero5"
                          },
                          "entityType": "user"
                        }
                      }
                    },
                    "sentAt": 1638423490,
                    "updatedAt": 1638423490,
                    "parentId": "1"
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "get": {
        "tags": ["Messages"],
        "summary": "List Threaded Messages",
        "description": "Fetches the messages list of a thread.",
        "operationId": "list-all-thread-messages",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the message whose thread messages are to be fetched.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Message ID", "value": "" } }
          }
        ],
        "responses": {
          "200": {
            "description": "Create Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "properties": { "parentId": { "readOnly": false } },
                            "type": "object"
                          },
                          { "$ref": "#/components/schemas/messageSchema" }
                        ]
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageMetaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "id": "2",
                      "conversationId": "superhero3_user_superhero5",
                      "sender": "superhero3",
                      "receiverType": "user",
                      "receiver": "superhero5",
                      "category": "message",
                      "type": "text",
                      "data": {
                        "text": "test     hello",
                        "entities": {
                          "sender": {
                            "entity": {
                              "uid": "superhero3",
                              "name": "Spiderman",
                              "role": "default",
                              "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                              "status": "offline",
                              "createdAt": 1638361550
                            },
                            "entityType": "user"
                          },
                          "receiver": {
                            "entity": {
                              "uid": "superhero5",
                              "name": "Cyclops",
                              "role": "default",
                              "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                              "status": "offline",
                              "createdAt": 1638361550,
                              "conversationId": "superhero3_user_superhero5"
                            },
                            "entityType": "user"
                          }
                        },
                        "metadata": { "key1": "val1" }
                      },
                      "sentAt": 1638423490,
                      "updatedAt": 1638423490,
                      "parentId": "1"
                    }
                  ],
                  "meta": {
                    "current": { "limit": 100, "count": 1 },
                    "next": {
                      "affix": "append",
                      "sentAt": 1638423490,
                      "id": "3"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/messages": {
      "get": {
        "tags": ["Messages"],
        "summary": "List User Messages",
        "description": "Fetches messages between onBehalfOfuid and an uid from path param.",
        "operationId": "user-list-user-messages",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/uid" },
          {
            "name": "searchKey",
            "in": "query",
            "description": "searches for occurence of message.",
            "schema": { "type": "string" }
          },
          {
            "name": "unread",
            "in": "query",
            "description": "displays all the unread messages of the user.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "undelivered",
            "in": "query",
            "description": "displays all the messages those are undelivered.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "count",
            "in": "query",
            "description": "displays the count of messages as per group/user",
            "schema": { "type": "boolean" }
          },
          {
            "name": "hideReplies",
            "in": "query",
            "description": "Shows only messages skipping the replies in the message thread.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "affix",
            "in": "query",
            "description": "Determines whether to pull the messages either before or after any message id. Possible values are append(after) and prepend(before).",
            "schema": { "type": "string", "enum": ["append", "prepend"] }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Retrieves all those messages after the passed id.",
            "schema": { "type": "string" }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Fetches messages that belongs to specific category.",
            "schema": { "type": "string" }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Fetches messages that contains multiple categories.",
            "schema": { "type": "array", "items": {} }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Fetches messages that belongs to a specific type.",
            "schema": { "type": "string" }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Fetches messages with multiple types.",
            "schema": { "type": "array", "items": {} }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "The number of records to fetch. Minimum value: 1, Maximum value: 1000",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to fetch. Minimum value: 1, Maximum value: 1000 (works alongside onBehalfOf header)",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "fromTimestamp",
            "in": "query",
            "description": "Fetches the messages from this timestamp.",
            "schema": { "type": "integer" }
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "description": "Fetches the messages till this timestamp.",
            "schema": { "type": "integer" }
          },
          {
            "name": "withTags",
            "in": "query",
            "description": "This will fetch messages along with the tags.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "This will fetch only those messages belonging to the mentioned tags.",
            "schema": { "type": "array", "items": {} }
          }
        ],
        "responses": {
          "200": {
            "description": "Get User Messages",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": {
                            "$ref": "#/components/schemas/updatemessageSchema"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageMetaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "id": "1776",
                      "conversationId": "superhero2_user_superhero3",
                      "sender": "superhero2",
                      "receiverType": "user",
                      "receiver": "superhero3",
                      "category": "call",
                      "type": "audio",
                      "data": {
                        "action": "initiated",
                        "entities": {
                          "by": {
                            "entity": {
                              "uid": "superhero2",
                              "name": "Captain America",
                              "role": "default",
                              "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                              "status": "offline"
                            },
                            "entityType": "user"
                          },
                          "on": {
                            "entity": {
                              "data": {
                                "entities": {
                                  "sender": {
                                    "entity": {
                                      "uid": "superhero2",
                                      "name": "Captain America",
                                      "role": "default",
                                      "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                                      "status": "offline"
                                    },
                                    "entityType": "user"
                                  },
                                  "receiver": {
                                    "entity": {
                                      "uid": "superhero3",
                                      "name": "Spiderman",
                                      "role": "default",
                                      "avatar": "https://data-eu.cometchat.io/assets/images/avatars/spiderman.png",
                                      "status": "offline",
                                      "conversationId": "superhero2_user_superhero3"
                                    },
                                    "entityType": "user"
                                  }
                                },
                                "metadata": { "key": { "one": "two" } }
                              },
                              "type": "audio",
                              "sender": "superhero2",
                              "status": "initiated",
                              "joinedAt": 1646995097,
                              "receiver": "superhero3",
                              "sessionid": "16469950973f7f6a1ea6d5166db11c929cdbde6a61902e10ba",
                              "wsChannel": {
                                "secret": "083c2a7f660150e42c2bf07a17231e90980b290d",
                                "service": "19757e59e8b9669.call",
                                "identity": "[19757e59e8b9669]16469950973f7f6a1ea6d5166db11c929cdbde6a61902e10ba"
                              },
                              "initiatedAt": 1646995097,
                              "receiverType": "user",
                              "conversationId": "superhero2_user_superhero3"
                            },
                            "entityType": "call"
                          },
                          "for": {
                            "entity": {
                              "uid": "superhero3",
                              "name": "Spiderman",
                              "role": "default",
                              "avatar": "https://data-eu.cometchat.io/assets/images/avatars/spiderman.png",
                              "status": "offline",
                              "conversationId": "superhero2_user_superhero3"
                            },
                            "entityType": "user"
                          }
                        }
                      },
                      "sentAt": 1646995097,
                      "updatedAt": 1646995097
                    },
                    {
                      "id": "1777",
                      "conversationId": "superhero2_user_superhero3",
                      "sender": "superhero3",
                      "receiverType": "user",
                      "receiver": "superhero2",
                      "category": "call",
                      "type": "video",
                      "data": {
                        "action": "ongoing",
                        "entities": {
                          "by": {
                            "entity": {
                              "uid": "superhero3",
                              "name": "Spiderman",
                              "role": "default",
                              "avatar": "https://data-eu.cometchat.io/assets/images/avatars/spiderman.png",
                              "status": "offline"
                            },
                            "entityType": "user"
                          },
                          "on": {
                            "entity": {
                              "data": {
                                "entities": {
                                  "sender": {
                                    "entity": {
                                      "uid": "superhero2",
                                      "name": "Captain America",
                                      "role": "default",
                                      "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                                      "status": "offline"
                                    },
                                    "entityType": "user"
                                  },
                                  "receiver": {
                                    "entity": {
                                      "uid": "superhero3",
                                      "name": "Spiderman",
                                      "role": "default",
                                      "avatar": "https://data-eu.cometchat.io/assets/images/avatars/spiderman.png",
                                      "status": "offline",
                                      "conversationId": "superhero2_user_superhero3"
                                    },
                                    "entityType": "user"
                                  }
                                },
                                "metadata": { "key": { "one": "two" } }
                              },
                              "type": "video",
                              "sender": "superhero2",
                              "status": "ongoing",
                              "joinedAt": 1646995512,
                              "receiver": "superhero3",
                              "sessionid": "16469950973f7f6a1ea6d5166db11c929cdbde6a61902e10ba",
                              "startedAt": 1646995512,
                              "wsChannel": {
                                "secret": "083c2a7f660150e42c2bf07a17231e90980b290d",
                                "service": "19757e59e8b9669.call",
                                "identity": "[19757e59e8b9669]16469950973f7f6a1ea6d5166db11c929cdbde6a61902e10ba"
                              },
                              "initiatedAt": 1646995097,
                              "receiverType": "user",
                              "conversationId": "superhero2_user_superhero3"
                            },
                            "entityType": "call"
                          },
                          "for": {
                            "entity": {
                              "uid": "superhero2",
                              "name": "Captain America",
                              "role": "default",
                              "avatar": "https://data-eu.cometchat.io/assets/images/avatars/captainamerica.png",
                              "status": "offline",
                              "conversationId": "superhero2_user_superhero3"
                            },
                            "entityType": "user"
                          }
                        }
                      },
                      "sentAt": 1646995512,
                      "updatedAt": 1646995512
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 0,
                      "count": 2,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    },
                    "cursor": { "id": 1786, "affix": "prepend" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/messages": {
      "get": {
        "tags": ["Messages"],
        "summary": "List Group Messages",
        "description": "Fetches the group message list for a user.",
        "operationId": "user-list-group-messages",
        "parameters": [
          { "$ref": "#/components/parameters/onBehalfOf" },
          { "$ref": "#/components/parameters/guid" },
          {
            "name": "searchKey",
            "in": "query",
            "description": "searches for occurence of message.",
            "schema": { "type": "string" }
          },
          {
            "name": "unread",
            "in": "query",
            "description": "displays all the unread messages of the user.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "undelivered",
            "in": "query",
            "description": "displays all the messages those are undelivered.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "count",
            "in": "query",
            "description": "displays the count of messages as per group/user",
            "schema": { "type": "boolean" }
          },
          {
            "name": "hideMessagesFromBlockedUsers",
            "in": "query",
            "description": "Hides the messages from blocked users in group.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "hideReplies",
            "in": "query",
            "description": "Shows only messages skipping the replies in the message thread.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "affix",
            "in": "query",
            "description": "Determines whether to pull the messages either before or after any message id. Possible values are append(after) and prepend(before).",
            "schema": { "type": "string", "enum": ["append", "prepend"] }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Retrieves all those messages after the passed id.",
            "schema": { "type": "string" }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Fetches messages that belongs to specific category.",
            "schema": { "type": "string" }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Fetches messages that contains multiple categories.",
            "schema": { "type": "array", "items": {} }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Fetches messages that belongs to a specific type.",
            "schema": { "type": "string" }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Fetches messages with multiple types.",
            "schema": { "type": "array", "items": {} }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to fetch. Minimum value: 1, Maximum value: 1000",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "fromTimestamp",
            "in": "query",
            "description": "Fetches the messages from this timestamp.",
            "schema": { "type": "integer" }
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "description": "Fetches the messages till this timestamp.",
            "schema": { "type": "integer" }
          },
          {
            "name": "withTags",
            "in": "query",
            "description": "This will fetch messages along with the tags.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "This will fetch only those messages belonging to the mentioned tags.",
            "schema": { "type": "array", "items": {} }
          }
        ],
        "responses": {
          "200": {
            "description": "Retreived Group Messages",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": { "$ref": "#/components/schemas/messageSchema" }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageMetaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "id": "1",
                      "conversationId": "superhero3_user_superhero5",
                      "sender": "superhero3",
                      "receiverType": "user",
                      "receiver": "superhero5",
                      "category": "message",
                      "type": "text",
                      "data": {
                        "text": "test     hello",
                        "entities": {
                          "sender": {
                            "entity": {
                              "uid": "superhero3",
                              "name": "Spiderman",
                              "role": "default",
                              "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                              "status": "offline",
                              "createdAt": 1638361550
                            },
                            "entityType": "user"
                          },
                          "receiver": {
                            "entity": {
                              "uid": "superhero5",
                              "name": "Cyclops",
                              "role": "default",
                              "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                              "status": "offline",
                              "createdAt": 1638361550,
                              "conversationId": "superhero3_user_superhero5"
                            },
                            "entityType": "user"
                          }
                        },
                        "metadata": { "key1": "val1" }
                      },
                      "sentAt": 1638423490,
                      "updatedAt": 1638423490
                    }
                  ],
                  "meta": {
                    "current": { "limit": 100, "count": 1 },
                    "next": {
                      "affix": "append",
                      "sentAt": 1638423490,
                      "id": "1"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/bots/{uid}/messages": {
      "post": {
        "tags": ["Messages"],
        "summary": "Send Bot Message",
        "description": "Sends Message from a Bot.",
        "operationId": "sends-bot-message",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "An UID of the Bot.",
            "required": true,
            "schema": { "type": "string" },
            "examples": { "string": { "summary": "Message ID", "value": "" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "receiver": {
                    "description": "The receiver of the message.",
                    "type": "string"
                  },
                  "receiverType": {
                    "description": "The receiverType of the message. either user or group",
                    "type": "string",
                    "enum": ["user", "group"]
                  },
                  "category": {
                    "description": "Category of the message. The available categories are message and custom.",
                    "type": "string",
                    "default": "message",
                    "enum": ["message", "custom"]
                  },
                  "type": {
                    "description": "Type of the message. The available values are text, image, file, audio, video.",
                    "type": "string",
                    "default": "text",
                    "enum": ["text", "image", "file", "audio", "audio"]
                  },
                  "data": {
                    "description": "JSON containing message attributes.",
                    "properties": {
                      "text": { "type": "string" },
                      "metadata": { "type": "object" },
                      "customData": {
                        "description": "when category==”custom”, this property can have any JSON object.",
                        "type": "object"
                      },
                      "attachments": {
                        "description": "For the messages with image, video, audio or file type (i.e. category==\"message\" && type !=\"text\"), the property contains an array of attachment objects.",
                        "type": "array",
                        "items": {
                          "properties": {
                            "url": {
                              "description": "Contains the URL of the attachment.",
                              "type": "string"
                            },
                            "name": {
                              "description": "Name of the attachment.",
                              "type": "string"
                            },
                            "mimeType": {
                              "description": "Mime Type of attachment.",
                              "type": "string"
                            },
                            "extension": {
                              "description": "The extension of the attachment.",
                              "type": "string"
                            },
                            "size": {
                              "description": "The size of the attachment(in bytes).",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "type": "object",
                    "default": {
                      "text": "Hi Tom!",
                      "metadata": { "key1": "value1", "key2": "value2" }
                    }
                  },
                  "multipleReceivers": {
                    "description": "JSON containing array of UIDs and GUIDs for whom the message must be sent. Format for multiple receivers - {\"uids\": {\"uid1\",\"uid2\"}, \"guids\":[\"guid1\"]}",
                    "type": "object"
                  },
                  "tags": {
                    "description": "A list of tags to identify specific messages."
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send Bot Message",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/messageSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "id": "1",
                    "conversationId": "superhero3_user_superhero5",
                    "sender": "superhero3",
                    "receiverType": "user",
                    "receiver": "superhero5",
                    "category": "message",
                    "type": "text",
                    "data": {
                      "text": "test     hello",
                      "metadata": { "key1": "val1" },
                      "entities": {
                        "sender": {
                          "entity": {
                            "uid": "superhero3",
                            "name": "Spiderman",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/spiderman.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550
                          },
                          "entityType": "user"
                        },
                        "receiver": {
                          "entity": {
                            "uid": "superhero5",
                            "name": "Cyclops",
                            "avatar": "https://data-us.cometchat.io/assets/images/avatars/cyclops.png",
                            "status": "offline",
                            "role": "default",
                            "createdAt": 1638361550,
                            "conversationId": "superhero3_user_superhero5"
                          },
                          "entityType": "user"
                        }
                      }
                    },
                    "sentAt": 1638423490,
                    "updatedAt": 1638423490
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/conversations": {
      "get": {
        "tags": ["Conversations"],
        "summary": "List conversations",
        "description": "Fetching all the conversations",
        "operationId": "list-all-conversations",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.\n\n\nIf onBehalfOf header is not passed,then list Conversations API will be ordered based on `uid`, `updatedAt` and then `conversationWith`\n\nIf onBehalfOf header is passed, then list Conversations API will be ordered based on `updatedAt` and then `conversationWith`.",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "conversationType",
            "in": "query",
            "description": "Retrieves only the specified conversation type (user and group) while fetching conversations list.",
            "schema": { "type": "string" }
          },
          {
            "name": "withTags",
            "in": "query",
            "description": "Includes those groups that have tags.",
            "schema": { "type": "boolean" }
          },
          {
            "name": "tags",
            "in": "query",
            "description": "Fetches only those groups that have these tags.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "withUserAndGroupTags",
            "in": "query",
            "description": "Retrieves conversations with tags",
            "schema": { "type": "boolean" }
          },
          {
            "name": "userTags",
            "in": "query",
            "description": "Filters conversations by tags associated with the user entity in the conversationWith property.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "groupTags",
            "in": "query",
            "description": "Filters conversations by tags associated with the group entity in the conversationWith property.",
            "style": "form",
            "explode": false,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "unread",
            "in": "query",
            "description": "Lists only unread conversations by excluding the conversations with conversation.unreadMessageCount=0",
            "schema": { "type": "boolean" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of conversations to be fetched in a request. The default value is 100 and the maximum value is 1000.",
            "schema": { "type": "integer", "default": "100" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": { "type": "integer", "default": "1" }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "": {
                            "$ref": "#/components/schemas/conversationSchema"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "meta": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/metaSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "conversationId": "group_project-group",
                      "conversationType": "group",
                      "unreadMessageCount": "0",
                      "createdAt": 1630071782,
                      "updatedAt": 1630481413,
                      "lastMessage": {
                        "id": "50",
                        "conversationId": "group_project-group",
                        "sender": "superhero4",
                        "receiverType": "group",
                        "receiver": "project-group",
                        "category": "action",
                        "type": "groupMember",
                        "data": {
                          "action": "unbanned",
                          "entities": {
                            "by": {
                              "entity": {
                                "uid": "superhero4",
                                "name": "Wolverine",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                "status": "offline",
                                "createdAt": 1629869270
                              },
                              "entityType": "user"
                            },
                            "on": {
                              "entity": {
                                "uid": "superhero3",
                                "link": "https://data-us.cometchat.io/assets",
                                "name": "Captain America",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                                "status": "offline",
                                "createdAt": 1629869270,
                                "updatedAt": 1629964825,
                                "conversationId": "superhero3_user_superhero4"
                              },
                              "entityType": "user"
                            },
                            "for": {
                              "entity": {
                                "guid": "project-group",
                                "icon": "http://placehold.it/120x120&text=image1",
                                "name": "Project Group1",
                                "type": "private",
                                "owner": "superhero4",
                                "createdAt": 1630071341,
                                "updatedAt": 1630305525,
                                "updatedBy": "superhero4",
                                "description": "project related discussions between members",
                                "membersCount": 4,
                                "conversationId": "group_project-group"
                              },
                              "entityType": "group"
                            }
                          }
                        },
                        "sentAt": 1630305562,
                        "updatedAt": 1630305562,
                        "receipts": { "data": [[]] }
                      },
                      "conversationWith": {
                        "guid": "project-group",
                        "name": "Project Group1",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "private",
                        "scope": "participant",
                        "membersCount": 4,
                        "joinedAt": 1630071782,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1630071341,
                        "owner": "superhero4",
                        "updatedAt": 1630308875,
                        "updatedBy": "superhero4"
                      }
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 1,
                      "count": 1,
                      "per_page": 100,
                      "current_page": 1,
                      "total_pages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/conversations/{conversationId}": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get conversation",
        "description": "This API is deprecated please use Get User/Group ConversationAPI",
        "operationId": "get-conversation",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/conversationId" }
        ],
        "responses": {
          "200": {
            "description": "Get Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/conversationSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "conversationId": "group_project-group",
                      "conversationType": "group",
                      "unreadMessageCount": "0",
                      "createdAt": 1630071782,
                      "updatedAt": 1630481413,
                      "lastMessage": {
                        "id": "50",
                        "conversationId": "group_project-group",
                        "sender": "superhero4",
                        "receiverType": "group",
                        "receiver": "project-group",
                        "category": "action",
                        "type": "groupMember",
                        "data": {
                          "action": "unbanned",
                          "entities": {
                            "by": {
                              "entity": {
                                "uid": "superhero4",
                                "name": "Wolverine",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                "status": "offline",
                                "createdAt": 1629869270
                              },
                              "entityType": "user"
                            },
                            "on": {
                              "entity": {
                                "uid": "superhero3",
                                "link": "https://data-us.cometchat.io/assets",
                                "name": "Captain America",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                                "status": "offline",
                                "createdAt": 1629869270,
                                "updatedAt": 1629964825,
                                "conversationId": "superhero3_user_superhero4"
                              },
                              "entityType": "user"
                            },
                            "for": {
                              "entity": {
                                "guid": "project-group",
                                "icon": "http://placehold.it/120x120&text=image1",
                                "name": "Project Group1",
                                "type": "private",
                                "owner": "superhero4",
                                "createdAt": 1630071341,
                                "updatedAt": 1630305525,
                                "updatedBy": "superhero4",
                                "description": "project related discussions between members",
                                "membersCount": 4,
                                "conversationId": "group_project-group"
                              },
                              "entityType": "group"
                            }
                          }
                        },
                        "sentAt": 1630305562,
                        "updatedAt": 1630305562,
                        "receipts": { "data": [[]] }
                      },
                      "conversationWith": {
                        "guid": "project-group",
                        "name": "Project Group1",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "private",
                        "scope": "participant",
                        "membersCount": 4,
                        "joinedAt": 1630071782,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1630071341,
                        "owner": "superhero4",
                        "updatedAt": 1630308875,
                        "updatedBy": "superhero4"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Conversations"],
        "summary": "Delete Conversation",
        "description": "This API is deprecated please use Reset User/GroupConversation API",
        "operationId": "deletes-conversation",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/conversationId" }
        ],
        "responses": {
          "200": {
            "description": "Deleted Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The conversation group_project-group has been deleted successfully for all the users."
                  }
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/conversation": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get User Conversation",
        "description": "Getting user conversation",
        "operationId": "get-user-conversations",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/uid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Get user Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/userConversationSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "conversationId": "group_project-group",
                      "conversationType": "group",
                      "unreadMessageCount": "0",
                      "createdAt": 1630071782,
                      "updatedAt": 1630481413,
                      "lastMessage": {
                        "id": "50",
                        "conversationId": "group_project-group",
                        "sender": "superhero4",
                        "receiverType": "group",
                        "receiver": "project-group",
                        "category": "action",
                        "type": "groupMember",
                        "data": {
                          "action": "unbanned",
                          "entities": {
                            "by": {
                              "entity": {
                                "uid": "superhero4",
                                "name": "Wolverine",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                "status": "offline",
                                "createdAt": 1629869270
                              },
                              "entityType": "user"
                            },
                            "on": {
                              "entity": {
                                "uid": "superhero3",
                                "link": "https://data-us.cometchat.io/assets",
                                "name": "Captain America",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                                "status": "offline",
                                "createdAt": 1629869270,
                                "updatedAt": 1629964825,
                                "conversationId": "superhero3_user_superhero4"
                              },
                              "entityType": "user"
                            },
                            "for": {
                              "entity": {
                                "guid": "project-group",
                                "icon": "http://placehold.it/120x120&text=image1",
                                "name": "Project Group1",
                                "type": "private",
                                "owner": "superhero4",
                                "createdAt": 1630071341,
                                "updatedAt": 1630305525,
                                "updatedBy": "superhero4",
                                "description": "project related discussions between members",
                                "membersCount": 4,
                                "conversationId": "group_project-group"
                              },
                              "entityType": "group"
                            }
                          }
                        },
                        "sentAt": 1630305562,
                        "updatedAt": 1630305562
                      },
                      "conversationWith": {
                        "guid": "project-group",
                        "name": "Project Group1",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "private",
                        "scope": "participant",
                        "membersCount": 4,
                        "joinedAt": 1630071782,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1630071341,
                        "owner": "superhero4",
                        "updatedAt": 1630308875,
                        "updatedBy": "superhero4"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Conversations"],
        "summary": "Update User Conversation",
        "description": "Updating User Conversation",
        "operationId": "updates-user-conversation",
        "parameters": [
          { "$ref": "#/components/parameters/uid--conversation" },
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "description": "List of tags to identify specific conversation.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/userConversationSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "conversationId": "group_project-group",
                      "conversationType": "group",
                      "unreadMessageCount": "0",
                      "createdAt": 1630071782,
                      "updatedAt": 1630481413,
                      "lastMessage": {
                        "id": "50",
                        "conversationId": "group_project-group",
                        "sender": "superhero4",
                        "receiverType": "group",
                        "receiver": "project-group",
                        "category": "action",
                        "type": "groupMember",
                        "data": {
                          "action": "unbanned",
                          "entities": {
                            "by": {
                              "entity": {
                                "uid": "superhero4",
                                "name": "Wolverine",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                "status": "offline",
                                "createdAt": 1629869270
                              },
                              "entityType": "user"
                            },
                            "on": {
                              "entity": {
                                "uid": "superhero3",
                                "link": "https://data-us.cometchat.io/assets",
                                "name": "Captain America",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                                "status": "offline",
                                "createdAt": 1629869270,
                                "updatedAt": 1629964825,
                                "conversationId": "superhero3_user_superhero4"
                              },
                              "entityType": "user"
                            },
                            "for": {
                              "entity": {
                                "guid": "project-group",
                                "icon": "http://placehold.it/120x120&text=image1",
                                "name": "Project Group1",
                                "type": "private",
                                "owner": "superhero4",
                                "createdAt": 1630071341,
                                "updatedAt": 1630305525,
                                "updatedBy": "superhero4",
                                "description": "project related discussions between members",
                                "membersCount": 4,
                                "conversationId": "group_project-group"
                              },
                              "entityType": "group"
                            }
                          }
                        },
                        "sentAt": 1630305562,
                        "updatedAt": 1630305562,
                        "receipts": { "data": [[]] }
                      },
                      "conversationWith": {
                        "guid": "project-group",
                        "name": "Project Group1",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "private",
                        "scope": "participant",
                        "membersCount": 4,
                        "joinedAt": 1630071782,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1630071341,
                        "owner": "superhero4",
                        "updatedAt": 1630308875,
                        "updatedBy": "superhero4"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Conversations"],
        "summary": "Reset User Conversation",
        "description": "Resetting User Conversation",
        "operationId": "resets-user-conversation",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/uid--conversation" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "conversationWith": {
                    "description": "UID of a user",
                    "type": "string"
                  },
                  "deleteMessagesPermanently": {
                    "description": "Permanently deletes messages in that particular conversation",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Resetted user Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The conversation superhero1_user_superhero2 has been deleted successfully for UID superhero1."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/conversation/delivered": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Mark User Conversation As Delivered",
        "description": "This API will mark all the undelivered messages in the conversation as delivered.",
        "operationId": "mark-conversation-as-delivered",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the receiver of the message",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/uid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Marking Conversation as delivered",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "Message": "All the messages from the user {{UID}} are marked as delivered for the user {{onBehalfOf}}."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/users/{uid}/conversation/read": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Mark User Conversation As Read",
        "description": "This API will mark all the unread messages in the conversation as read.",
        "operationId": "mark-conversation-as-read",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the receiver of the message",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/uid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Marking Conversation as read",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "Message": "All the messages from the user {{UID}} are marked as read for the user {{onBehalfOf}}."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/conversation": {
      "get": {
        "tags": ["Conversations"],
        "summary": "Get Group Conversation",
        "description": "Getting group conversation",
        "operationId": "get-group-conversations",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/guid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Get user Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/userConversationSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "conversationId": "group_project-group",
                      "conversationType": "group",
                      "unreadMessageCount": "0",
                      "createdAt": 1630071782,
                      "updatedAt": 1630481413,
                      "lastMessage": {
                        "id": "50",
                        "conversationId": "group_project-group",
                        "sender": "superhero4",
                        "receiverType": "group",
                        "receiver": "project-group",
                        "category": "action",
                        "type": "groupMember",
                        "data": {
                          "action": "unbanned",
                          "entities": {
                            "by": {
                              "entity": {
                                "uid": "superhero4",
                                "name": "Wolverine",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                "status": "offline",
                                "createdAt": 1629869270
                              },
                              "entityType": "user"
                            },
                            "on": {
                              "entity": {
                                "uid": "superhero3",
                                "link": "https://data-us.cometchat.io/assets",
                                "name": "Captain America",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                                "status": "offline",
                                "createdAt": 1629869270,
                                "updatedAt": 1629964825,
                                "conversationId": "superhero3_user_superhero4"
                              },
                              "entityType": "user"
                            },
                            "for": {
                              "entity": {
                                "guid": "project-group",
                                "icon": "http://placehold.it/120x120&text=image1",
                                "name": "Project Group1",
                                "type": "private",
                                "owner": "superhero4",
                                "createdAt": 1630071341,
                                "updatedAt": 1630305525,
                                "updatedBy": "superhero4",
                                "description": "project related discussions between members",
                                "membersCount": 4,
                                "conversationId": "group_project-group"
                              },
                              "entityType": "group"
                            }
                          }
                        },
                        "sentAt": 1630305562,
                        "updatedAt": 1630305562
                      },
                      "conversationWith": {
                        "guid": "project-group",
                        "name": "Project Group1",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "private",
                        "scope": "participant",
                        "membersCount": 4,
                        "joinedAt": 1630071782,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1630071341,
                        "owner": "superhero4",
                        "updatedAt": 1630308875,
                        "updatedBy": "superhero4"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "put": {
        "tags": ["Conversations"],
        "summary": "Update Group Conversation",
        "description": "Updating Group Conversation",
        "operationId": "updates-group-conversation",
        "parameters": [
          { "$ref": "#/components/parameters/guid--conversation" },
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "description": "List of tags to identify specific conversation.",
                    "type": "array",
                    "items": { "type": "string" }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": {
                          "$ref": "#/components/schemas/userConversationSchema"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": [
                    {
                      "conversationId": "group_project-group",
                      "conversationType": "group",
                      "unreadMessageCount": "0",
                      "createdAt": 1630071782,
                      "updatedAt": 1630481413,
                      "lastMessage": {
                        "id": "50",
                        "conversationId": "group_project-group",
                        "sender": "superhero4",
                        "receiverType": "group",
                        "receiver": "project-group",
                        "category": "action",
                        "type": "groupMember",
                        "data": {
                          "action": "unbanned",
                          "entities": {
                            "by": {
                              "entity": {
                                "uid": "superhero4",
                                "name": "Wolverine",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/wolverine.png",
                                "status": "offline",
                                "createdAt": 1629869270
                              },
                              "entityType": "user"
                            },
                            "on": {
                              "entity": {
                                "uid": "superhero3",
                                "link": "https://data-us.cometchat.io/assets",
                                "name": "Captain America",
                                "role": "default",
                                "avatar": "https://data-us.cometchat.io/assets/images/avatars/captainamerica.png",
                                "status": "offline",
                                "createdAt": 1629869270,
                                "updatedAt": 1629964825,
                                "conversationId": "superhero3_user_superhero4"
                              },
                              "entityType": "user"
                            },
                            "for": {
                              "entity": {
                                "guid": "project-group",
                                "icon": "http://placehold.it/120x120&text=image1",
                                "name": "Project Group1",
                                "type": "private",
                                "owner": "superhero4",
                                "createdAt": 1630071341,
                                "updatedAt": 1630305525,
                                "updatedBy": "superhero4",
                                "description": "project related discussions between members",
                                "membersCount": 4,
                                "conversationId": "group_project-group"
                              },
                              "entityType": "group"
                            }
                          }
                        },
                        "sentAt": 1630305562,
                        "updatedAt": 1630305562,
                        "receipts": { "data": [[]] }
                      },
                      "conversationWith": {
                        "guid": "project-group",
                        "name": "Project Group1",
                        "description": "project related discussions between members",
                        "icon": "http://placehold.it/120x120&text=image1",
                        "type": "private",
                        "scope": "participant",
                        "membersCount": 4,
                        "joinedAt": 1630071782,
                        "conversationId": "group_project-group",
                        "hasJoined": true,
                        "createdAt": 1630071341,
                        "owner": "superhero4",
                        "updatedAt": 1630308875,
                        "updatedBy": "superhero4"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      },
      "delete": {
        "tags": ["Conversations"],
        "summary": "Reset Group Conversation",
        "description": "Resetting Group Conversation",
        "operationId": "resets-group-conversation",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the user on whose behalf the action is performed.",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/guid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Resetted user Conversations",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "The conversation superhero1_user_superhero2 has been deleted successfully for UID superhero1."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/conversation/delivered": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Mark Group Conversation As Delivered",
        "description": "This API will mark all the undelivered messages in the group conversation as delivered.",
        "operationId": "mark-group-conversation-as-delivered",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the receiver of the message",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/guid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Marking Conversation as delivered",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "All the messages in group {{GUID}} are marked as delivered for the user {{onBehalfOf}}."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    },
    "/groups/{guid}/conversation/read": {
      "post": {
        "tags": ["Conversations"],
        "summary": "Mark Group Conversation As Read",
        "description": "This API will mark all the unread messages in the group conversation as read.",
        "operationId": "mark-group-conversation-as-read",
        "parameters": [
          {
            "name": "onBehalfOf",
            "in": "header",
            "description": "UID of the receiver of the message",
            "required": true,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/guid--conversation" }
        ],
        "responses": {
          "200": {
            "description": "Marking Conversation as read",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "properties": {
                        "": { "$ref": "#/components/schemas/deleteSchema" }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "example": {
                  "data": {
                    "success": true,
                    "message": "All the messages in group {{GUID}} are marked as read for the user {{onBehalfOf}}."
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKey": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "APIKeySchema": {
        "description": "Response data",
        "properties": {
          "apiKey": { "type": "string" },
          "name": { "type": "string" },
          "scope": { "type": "string" },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      },
      "authTokenSchema": {
        "description": "Response data",
        "properties": {
          "uid": { "type": "string" },
          "authToken": { "type": "string" },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      },
      "bannedUserSchema": {
        "description": "Response data",
        "properties": {
          "uid": { "type": "string" },
          "name": { "type": "string" },
          "avatar": { "type": "string" },
          "status": { "type": "string" },
          "role": { "type": "string" },
          "scope": { "type": "string" },
          "isBanned": { "type": "boolean" },
          "joinedAt": { "type": "integer" },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      },
      "blockedUserSchema": {
        "description": "Response data",
        "properties": {
          "blockedByMe": { "type": "boolean" },
          "blockedByMeAt": { "type": "integer" },
          "blockedAt": { "type": "integer" },
          "updatedAt": { "type": "integer" },
          "conversationId": { "type": "string" }
        },
        "type": "object"
      },
      "conversationSchema": {
        "description": "Response data",
        "properties": {
          "conversationId": { "type": "string" },
          "conversationType": { "type": "string" },
          "unreadMessageCount": { "type": "string" },
          "createdAt": { "type": "integer" },
          "updatedAt": { "type": "integer" },
          "lastMessage": {
            "properties": {
              "id": { "type": "string" },
              "conversationId": { "type": "string" },
              "sender": { "type": "string" },
              "receiverType": { "type": "string" },
              "receiver": { "type": "string" },
              "category": { "type": "string" },
              "type": { "type": "string" },
              "data": {
                "properties": {
                  "action": { "type": "string" },
                  "": { "$ref": "#/components/schemas/objectEntitySchema" }
                },
                "type": "object"
              },
              "sentAt": { "type": "integer" },
              "updatedAt": { "type": "integer" },
              "receipts": {
                "properties": { "data": { "type": "array", "items": {} } },
                "type": "object"
              }
            },
            "type": "object"
          },
          "conversationWith": {
            "properties": {
              "": { "$ref": "#/components/schemas/conversationWithSchema" }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "conversationWithSchema": {
        "properties": {
          "guid": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "icon": { "type": "string" },
          "type": { "type": "string" },
          "scope": { "type": "string" },
          "membersCount": { "type": "integer" },
          "joinedAt": { "type": "integer" },
          "conversationId": { "type": "string" },
          "hasJoined": { "type": "boolean", "default": "true" },
          "createdAt": { "type": "integer" },
          "owner": { "type": "string" },
          "updatedAt": { "type": "integer" },
          "updatedBy": { "type": "string" }
        },
        "type": "object"
      },
      "dataPointSchema": {
        "description": "Response data",
        "properties": {
          "messagesSent": { "type": "integer" },
          "readReceipts": { "type": "integer" },
          "deliveryReceipts": { "type": "integer" },
          "startTime": { "type": "integer" },
          "endTime": { "type": "integer" }
        },
        "type": "object"
      },
      "deleteSchema": {
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" }
        },
        "type": "object"
      },
      "groupEntitySchema": {
        "description": "Response data",
        "properties": {
          "id": { "type": "string" },
          "conversationId": { "type": "string" },
          "sender": { "type": "string" },
          "receiverType": { "type": "string" },
          "receiver": { "type": "string" },
          "category": { "type": "string" },
          "type": { "type": "string" },
          "data": {
            "properties": {
              "action": { "type": "string" },
              "entities": {
                "properties": {
                  "by": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "uid": { "type": "string" },
                          "name": { "type": "string" },
                          "role": { "type": "string" },
                          "status": { "type": "string" },
                          "createdAt": { "type": "integer" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  },
                  "on": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "uid": { "type": "string" },
                          "name": { "type": "string" },
                          "role": { "type": "string" },
                          "avatar": { "type": "string" },
                          "status": { "type": "string" },
                          "createdAt": { "type": "integer" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  },
                  "for": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "guid": { "type": "string" },
                          "icon": { "type": "string" },
                          "name": { "type": "string" },
                          "tags": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "type": { "type": "string" },
                          "owner": { "type": "string" },
                          "createdAt": { "type": "integer" },
                          "updatedAt": { "type": "integer" },
                          "description": { "type": "string" },
                          "membersCount": { "type": "integer" },
                          "conversationId": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "avatar": { "type": "string" },
          "metadata": {
            "properties": { "email": { "type": "string" } },
            "type": "object"
          },
          "status": { "type": "string" },
          "role": { "type": "string" },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      },
      "groupMemberListSchema": {
        "description": "Response data",
        "properties": {
          "uid": { "type": "string" },
          "name": { "type": "string" },
          "avatar": { "type": "string" },
          "status": { "type": "string" },
          "role": { "type": "string" },
          "scope": { "type": "string" },
          "joinedAt": { "type": "integer" },
          "createdAt": { "type": "integer" },
          "updatedAt": { "type": "integer" },
          "conversationId": { "type": "string" }
        },
        "type": "object"
      },
      "groupMemberSchema": {
        "description": "Response data",
        "properties": {
          "usersToBan": {
            "properties": {
              "<uid>": {
                "properties": { "success": { "type": "boolean" } },
                "type": "object"
              }
            },
            "type": "object"
          },
          "admins": {
            "properties": {
              "<uid>": {
                "properties": {
                  "success": { "type": "boolean" },
                  "data": {
                    "properties": {
                      "": { "$ref": "#/components/schemas/groupEntitySchema" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "moderators": {
            "properties": {
              "<uid>": {
                "properties": {
                  "success": { "type": "boolean" },
                  "data": {
                    "properties": {
                      "": { "$ref": "#/components/schemas/groupEntitySchema" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "participants": {
            "properties": {
              "<uid>": {
                "properties": {
                  "success": { "type": "boolean" },
                  "data": {
                    "properties": {
                      "": { "$ref": "#/components/schemas/groupEntitySchema" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "groupSchema": {
        "description": "Response data",
        "properties": {
          "guid": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "icon": { "type": "string" },
          "type": { "type": "string" },
          "scope": { "type": "string" },
          "membersCount": { "type": "integer" },
          "joinedAt": { "type": "integer" },
          "conversationId": { "type": "string" },
          "hasJoined": { "type": "boolean" },
          "owner": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      },
      "messageMetaSchema": {
        "properties": {
          "current": {
            "properties": {
              "limit": { "type": "integer" },
              "count": { "type": "integer" }
            },
            "type": "object"
          },
          "next": {
            "properties": {
              "affix": { "type": "string" },
              "sentAt": { "type": "integer" },
              "id": { "type": "string" }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "messageSchema": {
        "description": "Response data",
        "properties": {
          "id": { "type": "string" },
          "conversationId": { "type": "string" },
          "sender": { "type": "string" },
          "receiverType": { "type": "string" },
          "receiver": { "type": "string" },
          "category": { "type": "string" },
          "type": { "type": "string" },
          "data": {
            "properties": {
              "text": { "type": "string" },
              "metadata": { "type": "object" },
              "entities": {
                "properties": {
                  "sender": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "uid": { "type": "string" },
                          "name": { "type": "string" },
                          "role": { "type": "string" },
                          "avatar": { "type": "string" },
                          "status": { "type": "string" },
                          "createdAt": { "type": "integer" },
                          "conversationId": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  },
                  "receiver": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "uid": { "type": "string" },
                          "name": { "type": "string" },
                          "role": { "type": "string" },
                          "avatar": { "type": "string" },
                          "status": { "type": "string" },
                          "createdAt": { "type": "integer" },
                          "conversationId": { "type": "string" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "sentAt": { "type": "integer" },
          "updatedAt": { "type": "integer" }
        },
        "type": "object"
      },
      "metaSchema": {
        "properties": {
          "pagination": {
            "properties": {
              "total": { "type": "integer" },
              "count": { "type": "integer" },
              "per_page": { "type": "integer" },
              "current_page": { "type": "integer" },
              "total_pages": { "type": "integer" }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "objectEntitySchema": {
        "properties": {
          "entities": {
            "properties": {
              "by": {
                "properties": {
                  "entity": {
                    "properties": {
                      "uid": { "type": "string" },
                      "name": { "type": "string" },
                      "status": { "type": "string" },
                      "role": { "type": "string" },
                      "createdAt": { "type": "integer" }
                    },
                    "type": "object"
                  },
                  "entityType": { "type": "string" }
                },
                "type": "object"
              },
              "for": {
                "properties": {
                  "entity": {
                    "properties": {
                      "guid": { "type": "string" },
                      "icon": { "type": "string" },
                      "name": { "type": "string" },
                      "type": { "type": "string" },
                      "owner": { "type": "string" },
                      "createdAt": { "type": "integer" },
                      "updatedAt": { "type": "integer" },
                      "updatedBy": { "type": "integer" },
                      "description": { "type": "integer" },
                      "membersCount": { "type": "integer" },
                      "conversationId": { "type": "integer" }
                    },
                    "type": "object"
                  },
                  "entityType": { "type": "string" }
                },
                "type": "object"
              },
              "on": {
                "properties": {
                  "entity": {
                    "properties": {
                      "uid": { "type": "string" },
                      "link": { "type": "string" },
                      "name": { "type": "string" },
                      "role": { "type": "string" },
                      "avatar": { "type": "string" },
                      "status": { "type": "string" },
                      "createdAt": { "type": "integer" },
                      "updatedAt": { "type": "integer" },
                      "conversationId": { "type": "string" }
                    },
                    "type": "object"
                  },
                  "entityType": { "type": "string" }
                },
                "type": "object"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "roleSchema": {
        "description": "Response data",
        "properties": {
          "role": { "type": "string" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "metadata": { "type": "object" },
          "email": { "type": "string" },
          "settings": {
            "properties": {
              "listUsers": { "type": "string" },
              "sendMessagesTo": { "type": "string" }
            },
            "type": "object"
          },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      },
      "updatemessageSchema": {
        "description": "Response data",
        "properties": {
          "id": { "type": "string" },
          "conversationId": { "type": "string" },
          "sender": { "type": "string" },
          "receiverType": { "type": "string" },
          "receiver": { "type": "string" },
          "category": { "type": "string" },
          "type": { "type": "string" },
          "data": {
            "properties": {
              "action": { "type": "string" },
              "entities": {
                "properties": {
                  "by": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "uid": { "type": "string" },
                          "name": { "type": "string" },
                          "status": { "type": "string" },
                          "role": { "type": "string" },
                          "createdAt": { "type": "integer" },
                          "updatedAt": { "type": "integer" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  },
                  "for": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "uid": { "type": "string" },
                          "name": { "type": "string" },
                          "avatar": { "type": "string" },
                          "status": { "type": "string" },
                          "role": { "type": "string" },
                          "createdAt": { "type": "integer" }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  },
                  "on": {
                    "properties": {
                      "entity": {
                        "properties": {
                          "id": { "type": "string" },
                          "conversationId": { "type": "string" },
                          "sender": { "type": "string" },
                          "receiverType": { "type": "string" },
                          "receiver": { "type": "string" },
                          "category": { "type": "string" },
                          "type": { "type": "string" },
                          "data": {
                            "properties": {
                              "text": { "type": "string" },
                              "entities": {
                                "properties": {
                                  "sender": {
                                    "properties": {
                                      "entity": {
                                        "properties": {
                                          "uid": { "type": "string" },
                                          "name": { "type": "string" },
                                          "role": { "type": "string" },
                                          "avatar": { "type": "string" },
                                          "status": { "type": "string" },
                                          "createdAt": { "type": "string" }
                                        },
                                        "type": "object"
                                      },
                                      "entityType": { "type": "string" }
                                    },
                                    "type": "object"
                                  },
                                  "receiver": {
                                    "properties": {
                                      "entity": {
                                        "properties": {
                                          "uid": { "type": "string" },
                                          "name": { "type": "string" },
                                          "role": { "type": "string" },
                                          "avatar": { "type": "string" },
                                          "status": { "type": "string" },
                                          "createdAt": { "type": "string" },
                                          "conversationId": { "type": "string" }
                                        },
                                        "type": "object"
                                      },
                                      "entityType": { "type": "string" }
                                    },
                                    "type": "object"
                                  }
                                },
                                "type": "object"
                              }
                            },
                            "type": "object"
                          },
                          "sentAt": { "type": "integer" },
                          "editedAt": { "type": "integer" },
                          "editedBy": { "type": "integer" },
                          "updatedAt": { "type": "integer" },
                          "tags": { "type": "array", "items": {} }
                        },
                        "type": "object"
                      },
                      "entityType": { "type": "string" }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "sentAt": { "type": "integer" },
          "updatedAt": { "type": "integer" }
        },
        "type": "object"
      },
      "usageMetricsSchema": {
        "description": "Response data",
        "properties": {
          "metrics": {
            "properties": {
              "audio_minutes": { "type": "integer" },
              "video_minutes": { "type": "integer" },
              "recorded_minutes": { "type": "integer" },
              "active_users": { "type": "integer" },
              "concurrent_users": { "type": "integer" }
            },
            "type": "object"
          },
          "time_range": {
            "properties": {
              "fromDate": { "type": "integer" },
              "toDate": { "type": "integer" }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "userConversationSchema": {
        "description": "Response data",
        "properties": {
          "conversationId": { "type": "string" },
          "conversationType": { "type": "string" },
          "unreadMessageCount": { "type": "string" },
          "createdAt": { "type": "integer" },
          "updatedAt": { "type": "integer" },
          "lastMessage": {
            "properties": {
              "id": { "type": "string" },
              "conversationId": { "type": "string" },
              "sender": { "type": "string" },
              "receiverType": { "type": "string" },
              "receiver": { "type": "string" },
              "category": { "type": "string" },
              "type": { "type": "string" },
              "data": {
                "properties": {
                  "text": { "type": "string" },
                  "": { "$ref": "#/components/schemas/objectEntitySchema" }
                },
                "type": "object"
              },
              "sentAt": { "type": "integer" },
              "updatedAt": { "type": "integer" }
            },
            "type": "object"
          },
          "conversationWith": {
            "properties": {
              "": { "$ref": "#/components/schemas/conversationWithSchema" }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "userSchema": {
        "description": "Response data",
        "properties": {
          "uid": { "type": "string" },
          "name": { "type": "string" },
          "avatar": { "type": "string" },
          "metadata": {
            "properties": { "email": { "type": "string" } },
            "type": "object"
          },
          "status": { "type": "string" },
          "role": { "type": "string" },
          "createdAt": { "type": "integer" }
        },
        "type": "object"
      }
    },
    "parameters": {
      "authToken": {
        "name": "authToken",
        "in": "path",
        "description": "An auth token of a user.",
        "required": true,
        "schema": { "type": "string" },
        "examples": { "string": { "summary": "Auth Token", "value": "" } }
      },
      "conversationId": {
        "name": "conversationId",
        "in": "path",
        "description": "(Required) conversation id",
        "required": true,
        "schema": { "type": "string" }
      },
      "uid--conversation": {
        "name": "uid",
        "in": "path",
        "description": "UID of the user whose conversation needs to be fetched.",
        "required": true,
        "schema": { "type": "string" }
      },
      "guid--conversation": {
        "name": "guid",
        "in": "path",
        "description": "GUID of the group whose conversation needs to be fetched.",
        "required": true,
        "schema": { "type": "string" }
      },
      "uid": {
        "name": "uid",
        "in": "path",
        "description": "An UID of a user.",
        "required": true,
        "schema": { "type": "string" },
        "examples": { "string": { "summary": "UID", "value": "" } }
      },
      "guid": {
        "name": "guid",
        "in": "path",
        "description": "A GUID of a group.",
        "required": true,
        "schema": { "type": "string" },
        "examples": { "string": { "summary": "GUID", "value": "" } }
      },
      "requiredonBehalfOf": {
        "name": "onBehalfOf",
        "in": "header",
        "description": "UID of the user on whose behalf the action is performed.",
        "required": true,
        "schema": { "type": "string" }
      },
      "onBehalfOf": {
        "name": "onBehalfOf",
        "in": "header",
        "description": "UID of the user on whose behalf the action is performed.",
        "schema": { "type": "string" }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "description": "API Key with fullAccess scope(i.e. Rest API Key from the Dashboard).",
        "name": "apikey",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "API Keys",
      "description": "The API keys are used to authorise the APIs"
    },
    {
      "name": "Roles",
      "description": "The roles are used to give user access rights"
    },
    { "name": "Users", "description": "The REST collection for users." },
    {
      "name": "Auth Tokens",
      "description": "The auth tokens are used to login end users using client SDKs."
    },
    {
      "name": "Blocked Users",
      "description": "The REST collections for blocked users."
    },
    {
      "name": "Friends",
      "description": "List,add and remove friends by passing UID in path variables"
    },
    { "name": "Groups", "description": "The REST collections for groups." },
    {
      "name": "Banned Users",
      "description": "Ban and Unban user by passing other UID in path variables."
    },
    {
      "name": "Group Members",
      "description": "The REST collections for group members."
    },
    { "name": "Messages", "description": "The REST collections for messages." },
    {
      "name": "Conversations",
      "description": "The REST collections for conversations."
    },
    {
      "name": "Restrict Features",
      "description": "Allows Restricting Features"
    },
    { "name": "Metrics", "description": "Allows accessing Data Metrics" }
  ],
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}
